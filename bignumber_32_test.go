package ed448

import (
	"encoding/hex"

	. "gopkg.in/check.v1"
)

func (s *Ed448Suite) TestISR(c *C) {
	x := mustDeserialize(serialized{
		0x9f, 0x93, 0xed, 0x0a, 0x84, 0xde, 0xf0,
		0xc7, 0xa0, 0x4b, 0x3f, 0x03, 0x70, 0xc1,
		0x96, 0x3d, 0xc6, 0x94, 0x2d, 0x93, 0xf3,
		0xaa, 0x7e, 0x14, 0x96, 0xfa, 0xec, 0x9c,
		0x70, 0xd0, 0x59, 0x3c, 0x5c, 0x06, 0x5f,
		0x24, 0x33, 0xf7, 0xad, 0x26, 0x6a, 0x3a,
		0x45, 0x98, 0x60, 0xf4, 0xaf, 0x4f, 0x1b,
		0xff, 0x92, 0x26, 0xea, 0xa0, 0x7e, 0x29,
	})

	x.isr(x)

	n, _ := hex.DecodeString("04027d13a34bbe052fdf4247b02a4a3406268203a09076e56dee9dc2b699c4abc66f2832a677dfd0bf7e70ee72f01db170839717d1c64f02")
	exp := new(bigNumber).setBytes(n)

	c.Assert(x.equals(exp), Equals, true)
}

func (s *Ed448Suite) Test_DecafConstTimeSel(c *C) {
	n := &bigNumber{
		0x08db85c2, 0x0fd2361e,
		0x0ce2105d, 0x06a17729,
		0x0e3ca84d, 0x0a137aa5,
		0x0985ee61, 0x05a26d64,
		0x0734c5f3, 0x0da853af,
		0x01d955b7, 0x03160ecd,
		0x0a59046d, 0x0c32cf71,
		0x98dce72d, 0x00007fff,
	}

	x := &bigNumber{
		0x07247a3d, 0x002dc9e1,
		0x031defa2, 0x095e88d6,
		0x01c357b2, 0x05ec855a,
		0x067a119e, 0x0a5d929b,
		0x08cb3a0b, 0x0257ac50,
		0x0e26aa48, 0x0ce9f132,
		0x05a6fb92, 0x03cd308e,
		0x072318d2, 0x0fff8007,
	}
	expected := &bigNumber{
		0x07247a3d, 0x002dc9e1,
		0x031defa2, 0x095e88d6,
		0x01c357b2, 0x05ec855a,
		0x067a119e, 0x0a5d929b,
		0x08cb3a0b, 0x0257ac50,
		0x0e26aa48, 0x0ce9f132,
		0x05a6fb92, 0x03cd308e,
		0x072318d2, 0x0fff8007,
	}

	neg := word(lmask)
	n.decafConstTimeSel(n, x, neg)
	c.Assert(n, DeepEquals, expected)

	nonNeg := word(0)

	n.decafConstTimeSel(n, x, nonNeg)
	c.Assert(n, DeepEquals, n)
}

func (s *Ed448Suite) TestEquals(c *C) {
	n, _ := deserialize(serialized{
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	})

	c.Assert(n.equals(n), Equals, true)

	x := mustDeserialize(serialized{0x01, 0x01})
	y := mustDeserialize(serialized{0x01, 0x02})
	c.Assert(x.equals(y), Equals, false)
}

func (s *Ed448Suite) Test_DecafEq(c *C) {
	x, _ := deserialize(serialized{
		0xf5, 0x81, 0x74, 0xd5, 0x7a, 0x33, 0x72,
		0x36, 0x3c, 0x0d, 0x9f, 0xcf, 0xaa, 0x3d,
		0xc1, 0x8b, 0x1e, 0xff, 0x7e, 0x89, 0xbf,
		0x76, 0x78, 0x63, 0x65, 0x80, 0xd1, 0x7d,
		0xd8, 0x4a, 0x87, 0x3b, 0x14, 0xb9, 0xc0,
		0xe1, 0x68, 0x0b, 0xbd, 0xc8, 0x76, 0x47,
		0xf3, 0xc3, 0x82, 0x90, 0x2d, 0x2f, 0x58,
		0xd2, 0x75, 0x4b, 0x39, 0xbc, 0xa8, 0x74,
	})

	y, _ := deserialize(serialized{
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	})

	c.Assert(x.decafEq(x), Equals, decafTrue)
	c.Assert(x.decafEq(y), Equals, decafFalse)
}

func (s *Ed448Suite) TestZeroMask(c *C) {

	c.Assert(bigZero.zeroMask(), Equals, word(lmask))
	c.Assert(bigOne.zeroMask(), Equals, word(0))
}

func (s *Ed448Suite) TestDeserialize(c *C) {
	ser := serialized{0x1}
	n, ok := deserialize(ser)

	c.Assert(n, DeepEquals, bigOne)
	c.Assert(ok, Equals, true)

	ser = serialized{
		0xf5, 0x81, 0x74, 0xd5, 0x7a, 0x33, 0x72,
		0x36, 0x3c, 0x0d, 0x9f, 0xcf, 0xaa, 0x3d,
		0xc1, 0x8b, 0x1e, 0xff, 0x7e, 0x89, 0xbf,
		0x76, 0x78, 0x63, 0x65, 0x80, 0xd1, 0x7d,
		0xd8, 0x4a, 0x87, 0x3b, 0x14, 0xb9, 0xc0,
		0xe1, 0x68, 0x0b, 0xbd, 0xc8, 0x76, 0x47,
		0xf3, 0xc3, 0x82, 0x90, 0x2d, 0x2f, 0x58,
		0xd2, 0x75, 0x4b, 0x39, 0xbc, 0xa8, 0x74,
	}

	n, ok = deserialize(ser)

	c.Assert(n, DeepEquals, &bigNumber{
		0x57481f5, 0x72337ad,
		0xf0d3c36, 0x3daacf9,
		0xf1e8bc1, 0xbf897ef,
		0x5637876, 0x7dd1806,
		0xb874ad8, 0xc0b9143,
		0xd0b68e1, 0x4776c8b,
		0x082c3f3, 0x582f2d9,
		0x94b75d2, 0x74a8bc3,
	})
	c.Assert(ok, Equals, true)

	ser = serialized{
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	}

	n, ok = deserialize(ser)
	c.Assert(n, DeepEquals, &bigNumber{
		0xfffffff, 0xfffffff,
		0xfffffff, 0xfffffff,
		0xfffffff, 0xfffffff,
		0xfffffff, 0xfffffff,
		0xffffffe, 0xfffffff,
		0xfffffff, 0xfffffff,
		0xfffffff, 0xfffffff,
		0xfffffff, 0xfffffff,
	})
	c.Assert(ok, Equals, false)
}

func (s *Ed448Suite) TestSerialize(c *C) {
	dst := [fieldBytes]byte{}

	serialize(dst[:], bigOne)
	c.Assert(dst, DeepEquals, [fieldBytes]byte{1})

	p := &bigNumber{
		0xfffffff, 0xfffffff,
		0xfffffff, 0xfffffff,
		0xfffffff, 0xfffffff,
		0xfffffff, 0xfffffff,
		0xffffffe, 0xfffffff,
		0xfffffff, 0xfffffff,
		0xfffffff, 0xfffffff,
		0xfffffff, 0xfffffff,
	}

	serialize(dst[:], p)

	//0 because serialize reduces mod p
	c.Assert(dst, DeepEquals, [fieldBytes]byte{})
}

func (s *Ed448Suite) TestStrongReduce(c *C) {
	p, _ := deserialize(serialized{
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	})

	//p = p mod p = 0
	p.strongReduce()

	c.Assert(p, DeepEquals, bigZero)

	n := mustDeserialize(serialized{
		0xf5, 0x81, 0x74, 0xd5, 0x7a, 0x33, 0x72,
		0x36, 0x3c, 0x0d, 0x9f, 0xcf, 0xaa, 0x3d,
		0xc1, 0x8b, 0x1e, 0xff, 0x7e, 0x89, 0xbf,
		0x76, 0x78, 0x63, 0x65, 0x80, 0xd1, 0x7d,
		0xd8, 0x4a, 0x87, 0x3b, 0x14, 0xb9, 0xc0,
		0xe1, 0x68, 0x0b, 0xbd, 0xc8, 0x76, 0x47,
		0xf3, 0xc3, 0x82, 0x90, 0x2d, 0x2f, 0x58,
		0xd2, 0x75, 0x4b, 0x39, 0xbc, 0xa8, 0x74,
	})

	n.strongReduce()

	c.Assert(n, DeepEquals, mustDeserialize(serialized{
		0xf5, 0x81, 0x74, 0xd5, 0x7a, 0x33, 0x72,
		0x36, 0x3c, 0x0d, 0x9f, 0xcf, 0xaa, 0x3d,
		0xc1, 0x8b, 0x1e, 0xff, 0x7e, 0x89, 0xbf,
		0x76, 0x78, 0x63, 0x65, 0x80, 0xd1, 0x7d,
		0xd8, 0x4a, 0x87, 0x3b, 0x14, 0xb9, 0xc0,
		0xe1, 0x68, 0x0b, 0xbd, 0xc8, 0x76, 0x47,
		0xf3, 0xc3, 0x82, 0x90, 0x2d, 0x2f, 0x58,
		0xd2, 0x75, 0x4b, 0x39, 0xbc, 0xa8, 0x74,
	}))
}

func (s *Ed448Suite) Test_HighBit(c *C) {
	n := &bigNumber{0xdeadbeef}

	h := highBit(n)

	c.Assert(h, Equals, word(0x00))
}
