package ed448

import (
	. "gopkg.in/check.v1"
)

func (s *Ed448Suite) Test_DecafEq(c *C) {
	x, _ := deserialize(serialized{
		0xf5, 0x81, 0x74, 0xd5, 0x7a, 0x33, 0x72,
		0x36, 0x3c, 0x0d, 0x9f, 0xcf, 0xaa, 0x3d,
		0xc1, 0x8b, 0x1e, 0xff, 0x7e, 0x89, 0xbf,
		0x76, 0x78, 0x63, 0x65, 0x80, 0xd1, 0x7d,
		0xd8, 0x4a, 0x87, 0x3b, 0x14, 0xb9, 0xc0,
		0xe1, 0x68, 0x0b, 0xbd, 0xc8, 0x76, 0x47,
		0xf3, 0xc3, 0x82, 0x90, 0x2d, 0x2f, 0x58,
		0xd2, 0x75, 0x4b, 0x39, 0xbc, 0xa8, 0x74,
	})

	y, _ := deserialize(serialized{
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	})

	c.Assert(x.decafEq(x), Equals, word(lmask))
	c.Assert(x.decafEq(y), Equals, word(0))
}

func (s *Ed448Suite) TestDeserialize(c *C) {
	ser := serialized{0x1}
	n, ok := deserialize(ser)

	c.Assert(n, DeepEquals, &bigNumber{1})
	c.Assert(ok, Equals, true)

	ser = serialized{
		0xf5, 0x81, 0x74, 0xd5, 0x7a, 0x33, 0x72,
		0x36, 0x3c, 0x0d, 0x9f, 0xcf, 0xaa, 0x3d,
		0xc1, 0x8b, 0x1e, 0xff, 0x7e, 0x89, 0xbf,
		0x76, 0x78, 0x63, 0x65, 0x80, 0xd1, 0x7d,
		0xd8, 0x4a, 0x87, 0x3b, 0x14, 0xb9, 0xc0,
		0xe1, 0x68, 0x0b, 0xbd, 0xc8, 0x76, 0x47,
		0xf3, 0xc3, 0x82, 0x90, 0x2d, 0x2f, 0x58,
		0xd2, 0x75, 0x4b, 0x39, 0xbc, 0xa8, 0x74,
	}

	n, ok = deserialize(ser)

	c.Assert(n, DeepEquals, &bigNumber{
		0x57481f5, 0x72337ad,
		0xf0d3c36, 0x3daacf9,
		0xf1e8bc1, 0xbf897ef,
		0x5637876, 0x7dd1806,
		0xb874ad8, 0xc0b9143,
		0xd0b68e1, 0x4776c8b,
		0x082c3f3, 0x582f2d9,
		0x94b75d2, 0x74a8bc3,
	})
	c.Assert(ok, Equals, true)

	ser = serialized{
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	}

	n, ok = deserialize(ser)
	c.Assert(n, DeepEquals, &bigNumber{
		0xfffffff, 0xfffffff,
		0xfffffff, 0xfffffff,
		0xfffffff, 0xfffffff,
		0xfffffff, 0xfffffff,
		0xffffffe, 0xfffffff,
		0xfffffff, 0xfffffff,
		0xfffffff, 0xfffffff,
		0xfffffff, 0xfffffff,
	})
	c.Assert(ok, Equals, false)
}

func (s *Ed448Suite) TestSerialize(c *C) {
	dst := [fieldBytes]byte{}

	one := &bigNumber{0x01}
	serialize(dst[:], one)
	c.Assert(dst, DeepEquals, [fieldBytes]byte{1})

	p := &bigNumber{
		0xfffffff, 0xfffffff,
		0xfffffff, 0xfffffff,
		0xfffffff, 0xfffffff,
		0xfffffff, 0xfffffff,
		0xffffffe, 0xfffffff,
		0xfffffff, 0xfffffff,
		0xfffffff, 0xfffffff,
		0xfffffff, 0xfffffff,
	}

	serialize(dst[:], p)

	//0 because serialize reduces mod p
	c.Assert(dst, DeepEquals, [fieldBytes]byte{})
}

func (s *Ed448Suite) Test_HighBit(c *C) {
	n := &bigNumber{0xdeadbeef}

	h := highBit(n)

	c.Assert(h, Equals, word(0x00))
}
