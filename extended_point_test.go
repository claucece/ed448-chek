package ed448

import (
	"encoding/hex"

	. "gopkg.in/check.v1"
)

func (s *Ed448Suite) Test_IsValidPoint(c *C) {
	p := &twExtendedPoint{
		&bigNumber{
			0x034365c8, 0x06b2a874,
			0x0eb875d7, 0x0ae4c7a7,
			0x0785df04, 0x09929351,
			0x01fe8c3b, 0x0f2a0e5f,
			0x0111d39c, 0x07ab52ba,
			0x01df4552, 0x01d87566,
			0x0f297be2, 0x027c090f,
			0x0a81b155, 0x0d1a562b,
		},
		&bigNumber{
			0x00da9708, 0x0e7d583e,
			0x0dbcc099, 0x0d2dad89,
			0x05a49ce4, 0x01cb4ddc,
			0x0928d395, 0x0098d91d,
			0x0bff16ce, 0x06f02f9a,
			0x0ce27cc1, 0x0dab5783,
			0x0b553d94, 0x03251a0c,
			0x064d70fb, 0x07fe3a2f,
		},
		&bigNumber{
			0x0d5237cc, 0x0319d105,
			0x02ab2df5, 0x022e9736,
			0x0d79742f, 0x00688712,
			0x012d3a65, 0x0ef4925e,
			0x0bd0d260, 0x0832b532,
			0x05faef27, 0x01ffe567,
			0x0161ce73, 0x07bda0f5,
			0x035d04f1, 0x0930f532,
		},

		&bigNumber{
			0x01f6cc27, 0x09be7b8a,
			0x0226da79, 0x0f6202f1,
			0x0e7264dc, 0x0d25aeb1,
			0x06c81f07, 0x03c32cdc,
			0x0923c854, 0x0cfc9865,
			0x055b2fed, 0x05bdcc90,
			0x01a99835, 0x0ea08056,
			0x0abbf763, 0x03826c2f,
		},
	}

	//non-valid point
	q := &twExtendedPoint{
		&bigNumber{
			0xffffffff, 0xffffffff,
			0xffffffff, 0xffffffff,
			0xffffffff, 0xffffffff,
			0xffffffff, 0xffffffff,
			0xffffffff, 0xffffffff,
			0xffffffff, 0xffffffff,
			0xffffffff, 0xffffffff,
			0xffffffff, 0xffffffff,
		},
		&bigNumber{
			0xffffffff, 0xffffffff,
			0xffffffff, 0xffffffff,
			0xffffffff, 0xffffffff,
			0xffffffff, 0xffffffff,
			0xffffffff, 0xffffffff,
			0xffffffff, 0xffffffff,
			0xffffffff, 0xffffffff,
			0xffffffff, 0xffffffff,
		},
		&bigNumber{
			0xffffffff, 0xffffffff,
			0xffffffff, 0xffffffff,
			0xffffffff, 0xffffffff,
			0xffffffff, 0xffffffff,
			0xffffffff, 0xffffffff,
			0xffffffff, 0xffffffff,
			0xffffffff, 0xffffffff,
			0xffffffff, 0xffffffff,
		},
		&bigNumber{
			0xffffffff, 0xffffffff,
			0xffffffff, 0xffffffff,
			0xffffffff, 0xffffffff,
			0xffffffff, 0xffffffff,
			0xffffffff, 0xffffffff,
			0xffffffff, 0xffffffff,
			0xffffffff, 0xffffffff,
			0xffffffff, 0xffffffff,
		},
	}
	c.Assert(p.isValidPoint(), Equals, true)
	c.Assert(q.isValidPoint(), Equals, false)
}

func (s *Ed448Suite) Test_PointEquality(c *C) {
	p := &twExtendedPoint{
		&bigNumber{
			0x0e0fbf9e, 0x0ba1bcd7,
			0x01cc6d39, 0x053b56e8,
			0x0635d142, 0x0383307a,
			0x0f8a159b, 0x097fd2cf,
			0x0fa310f6, 0x05522bde,
			0x0b981703, 0x0b095b1e,
			0x042d4780, 0x05ae11df,
			0x0934fe80, 0x0dc6474d},
		&bigNumber{
			0x02c1149c, 0x0e72febf,
			0x05259893, 0x0723e184,
			0x0f7232ff, 0x019a5600,
			0x05581d2c, 0x07331444,
			0x04e0124a, 0x09c3c5e5,
			0x0945536e, 0x0b786a20,
			0x0f75623f, 0x00ba30e8,
			0x0cc589a3, 0x04a2eea8},
		&bigNumber{
			0x02406c71, 0x0b2fdb67,
			0x02591aa2, 0x085fc24e,
			0x0dc50d09, 0x08692c5b,
			0x0ba917d7, 0x0aefea74,
			0x037d0084, 0x04d5defa,
			0x08bbe7ad, 0x050da977,
			0x08adf827, 0x05425cdd,
			0x037d816d, 0x0d59cd0a},
		&bigNumber{
			0x0baf8c30, 0x06686ad3,
			0x0c149bac, 0x0f57f68d,
			0x05cd321a, 0x02ff8d60,
			0x09dcc4bd, 0x0f731ec2,
			0x0cd7ea75, 0x0be970e4,
			0x043d30e0, 0x0dd64b9b,
			0x04f78bf1, 0x0d1fde20,
			0x05c88e97, 0x026ce314},
	}

	q := &twExtendedPoint{
		&bigNumber{
			0x06172a44, 0x0731d576,
			0x0da247e0, 0x0d9fd318,
			0x072d1c77, 0x073e77aa,
			0x09a004b5, 0x012507b9,
			0x09a684c3, 0x08b559f8,
			0x0d445c85, 0x07941c89,
			0x0c942cd4, 0x02bcfe3e,
			0x022ccaaa, 0x0be3a6b3},
		&bigNumber{
			0x03294fb1, 0x0e4336b5,
			0x0fe125d6, 0x08c09f34,
			0x0f04e3ce, 0x0eac940d,
			0x09c38a23, 0x0a2ec035,
			0x06545488, 0x0355e18f,
			0x0522a0ec, 0x0ce0fd60,
			0x0bd3a6ce, 0x03fe9d85,
			0x06e5c4f3, 0x018cf1e5},
		&bigNumber{
			0x0e957107, 0x0f672aa2,
			0x049b0276, 0x07a7ecf2,
			0x0e9a1c69, 0x04067d01,
			0x03f2ddee, 0x0ffebccb,
			0x0d58b6cf, 0x0d95fb9c,
			0x077d5935, 0x078ddbc3,
			0x085093f2, 0x03015d2f,
			0x019d8e0a, 0x0388a2ac},
		&bigNumber{
			0x0bf26ccb, 0x0b930dcd,
			0x0e207a77, 0x0d8fdde5,
			0x04e2452b, 0x099e9922,
			0x0ec0b62c, 0x04f9d73b,
			0x03811a2a, 0x0871aefb,
			0x00f5e028, 0x0b6aa04c,
			0x0226cb55, 0x0b6e4ee0,
			0x0f3eba42, 0x04409402},
	}

	c.Assert(p.equals(p), Equals, word(lmask))
	c.Assert(p.equals(q), Equals, word(0x00))
}

func (s *Ed448Suite) Test_PointAdd(c *C) {

	p := &twExtendedPoint{
		&bigNumber{},
		&bigNumber{},
		&bigNumber{},
		&bigNumber{},
	}

	q := &twExtendedPoint{
		&bigNumber{
			0x0a7f964a, 0x0db033f8,
			0x062b9f0b, 0x07bff7d6,
			0x05e755a2, 0x013b6f8b,
			0x0f080bdc, 0x0a112ac0,
			0x0416988a, 0x03404b2f,
			0x00561ea3, 0x01df752c,
			0x070e0b1c, 0x0e73a0c4,
			0x078245d5, 0x09a42df0,
		},
		&bigNumber{
			0x0c2e6c3d, 0x0a03c3f2,
			0x0fd16e97, 0x0bab4ec6,
			0x08ddba78, 0x091638ef,
			0x0b0add85, 0x070c212d,
			0x04bcd337, 0x0c828579,
			0x0712cfff, 0x09c1534a,
			0x0119cafe, 0x08e72ee0,
			0x0f14ff19, 0x0d0c7e25,
		},
		&bigNumber{
			0x0a0d6be1, 0x0bcd9788,
			0x00f9ca8a, 0x038cf839,
			0x00912da2, 0x0a3c503a,
			0x056fe7e0, 0x03db9a49,
			0x0f19d062, 0x052ac631,
			0x01cbda35, 0x02967214,
			0x0eed2db2, 0x0a948ce0,
			0x05f7a3a7, 0x0fa35bc2,
		},
		&bigNumber{
			0x0fc9f32d, 0x0e442931,
			0x065e50ff, 0x04be230d,
			0x0dc923c2, 0x0000467c,
			0x08fc8902, 0x0e034cfb,
			0x0126370c, 0x06ec706d,
			0x06ff07ad, 0x0a27cd65,
			0x060f214f, 0x0eb7756d,
			0x0b694dc7, 0x015705ad,
		},
	}

	r := &twExtendedPoint{
		&bigNumber{
			0x075ee82f, 0x0078024b,
			0x0a72cc37, 0x07b7b942,
			0x01dc37cd, 0x05b2ca96,
			0x0fa5deaf, 0x071020de,
			0x09122cbe, 0x01bdbe1d,
			0x0eeb69f3, 0x073d88cf,
			0x0777b71a, 0x0aa1660a,
			0x0c4476bf, 0x08e2cf30,
		},
		&bigNumber{
			0x0aab8840, 0x0f0932b3,
			0x0088be9e, 0x0c4d55d6,
			0x01926f40, 0x01c112e0,
			0x0884dc6d, 0x0e66b50b,
			0x09120ee4, 0x0750ee39,
			0x048c6ce2, 0x00f9fe35,
			0x0f74988e, 0x05693a13,
			0x0c1d267c, 0x052d5ba0,
		},
		&bigNumber{
			0x043efd14, 0x07ce59a0,
			0x0f9b7154, 0x05663cbd,
			0x055ba08f, 0x0525f2b7,
			0x0e1d908d, 0x06d7d26a,
			0x0c4cee28, 0x02039ee7,
			0x0a733b28, 0x01be5db0,
			0x056e9a37, 0x0db1b9b6,
			0x088880cd, 0x03d26863,
		},
		&bigNumber{
			0x0b3765ab, 0x0ed3e150,
			0x02134041, 0x0ec8f519,
			0x0acb91c3, 0x0f916fd5,
			0x099a9e35, 0x0e44da01,
			0x0c16e971, 0x0c1b213b,
			0x0e824448, 0x0b197385,
			0x07988fd4, 0x0ab877a6,
			0x0d658e39, 0x0cf66684,
		},
	}

	exp := &twExtendedPoint{
		&bigNumber{
			0x0d6a2637, 0x0cee14c7,
			0x0b626f81, 0x02a8151b,
			0x01d9b4a2, 0x00c23d77,
			0x0859f8bc, 0x0e02e853,
			0x0314bf95, 0x04447761,
			0x09fb76bd, 0x0dd35230,
			0x03b3f440, 0x017dc316,
			0x09bf7799, 0x054f1cc4,
		},
		&bigNumber{
			0x021dd329, 0x019d887a,
			0x0029b32a, 0x06a01e7d,
			0x06081030, 0x036080a2,
			0x05c8240b, 0x0c11a3bc,
			0x00a2ecfe, 0x045ecf89,
			0x08e0d084, 0x06f80067,
			0x0b9d1318, 0x0b8bfeb3,
			0x07487524, 0x04e1609a,
		},
		&bigNumber{
			0x067eb923, 0x0d7bbefe,
			0x0cf769ff, 0x05725ec8,
			0x0c23c0ad, 0x091bcba2,
			0x0de48aec, 0x02c71185,
			0x0e607ca2, 0x042ba874,
			0x08a195fa, 0x04386d91,
			0x079778f4, 0x045ecac6,
			0x02c493ab, 0x050614a7,
		},
		&bigNumber{
			0x0f69cb7d, 0x0b9c1d3c,
			0x087a352c, 0x06c4b483,
			0x025fb591, 0x0bf2bd90,
			0x08f3ffa4, 0x008659f1,
			0x062cc1fd, 0x0892fc5b,
			0x05f37db7, 0x017d17a8,
			0x01b92f20, 0x088ba2bd,
			0x00e3ed5f, 0x0230bb39,
		},
	}

	p.add(q, r)
	c.Assert(p, DeepEquals, exp)

	a := p.copy()
	a.add(q, r)
	b := p.copy()
	b.add(r, q)

	//commute
	c.Assert(a, DeepEquals, b)
}

func (s *Ed448Suite) Test_PointSub(c *C) {

	p := &twExtendedPoint{
		&bigNumber{},
		&bigNumber{},
		&bigNumber{},
		&bigNumber{},
	}

	q := &twExtendedPoint{
		&bigNumber{
			0x0a7f964a, 0x0db033f8,
			0x062b9f0b, 0x07bff7d6,
			0x05e755a2, 0x013b6f8b,
			0x0f080bdc, 0x0a112ac0,
			0x0416988a, 0x03404b2f,
			0x00561ea3, 0x01df752c,
			0x070e0b1c, 0x0e73a0c4,
			0x078245d5, 0x09a42df0,
		},
		&bigNumber{
			0x0c2e6c3d, 0x0a03c3f2,
			0x0fd16e97, 0x0bab4ec6,
			0x08ddba78, 0x091638ef,
			0x0b0add85, 0x070c212d,
			0x04bcd337, 0x0c828579,
			0x0712cfff, 0x09c1534a,
			0x0119cafe, 0x08e72ee0,
			0x0f14ff19, 0x0d0c7e25,
		},
		&bigNumber{
			0x0a0d6be1, 0x0bcd9788,
			0x00f9ca8a, 0x038cf839,
			0x00912da2, 0x0a3c503a,
			0x056fe7e0, 0x03db9a49,
			0x0f19d062, 0x052ac631,
			0x01cbda35, 0x02967214,
			0x0eed2db2, 0x0a948ce0,
			0x05f7a3a7, 0x0fa35bc2,
		},
		&bigNumber{
			0x0fc9f32d, 0x0e442931,
			0x065e50ff, 0x04be230d,
			0x0dc923c2, 0x0000467c,
			0x08fc8902, 0x0e034cfb,
			0x0126370c, 0x06ec706d,
			0x06ff07ad, 0x0a27cd65,
			0x060f214f, 0x0eb7756d,
			0x0b694dc7, 0x015705ad,
		},
	}

	r := &twExtendedPoint{
		&bigNumber{
			0x075ee82f, 0x0078024b,
			0x0a72cc37, 0x07b7b942,
			0x01dc37cd, 0x05b2ca96,
			0x0fa5deaf, 0x071020de,
			0x09122cbe, 0x01bdbe1d,
			0x0eeb69f3, 0x073d88cf,
			0x0777b71a, 0x0aa1660a,
			0x0c4476bf, 0x08e2cf30,
		},
		&bigNumber{
			0x0aab8840, 0x0f0932b3,
			0x0088be9e, 0x0c4d55d6,
			0x01926f40, 0x01c112e0,
			0x0884dc6d, 0x0e66b50b,
			0x09120ee4, 0x0750ee39,
			0x048c6ce2, 0x00f9fe35,
			0x0f74988e, 0x05693a13,
			0x0c1d267c, 0x052d5ba0,
		},
		&bigNumber{
			0x043efd14, 0x07ce59a0,
			0x0f9b7154, 0x05663cbd,
			0x055ba08f, 0x0525f2b7,
			0x0e1d908d, 0x06d7d26a,
			0x0c4cee28, 0x02039ee7,
			0x0a733b28, 0x01be5db0,
			0x056e9a37, 0x0db1b9b6,
			0x088880cd, 0x03d26863,
		},
		&bigNumber{
			0x0b3765ab, 0x0ed3e150,
			0x02134041, 0x0ec8f519,
			0x0acb91c3, 0x0f916fd5,
			0x099a9e35, 0x0e44da01,
			0x0c16e971, 0x0c1b213b,
			0x0e824448, 0x0b197385,
			0x07988fd4, 0x0ab877a6,
			0x0d658e39, 0x0cf66684,
		},
	}

	exp := &twExtendedPoint{
		&bigNumber{
			0x0e264012, 0x0c218ff9,
			0x06393c0f, 0x0864e62d,
			0x05f0e534, 0x0267756d,
			0x0ce40403, 0x0e9e240d,
			0x09597584, 0x027844b2,
			0x0f8842bf, 0x01b5f03d,
			0x05fbfd9a, 0x0e4ed5e3,
			0x07087964, 0x07dc52d0,
		},

		&bigNumber{
			0x05484245, 0x0f3c416d,
			0x083a1e46, 0x05e6a9d8,
			0x05bfedad, 0x0a9a7379,
			0x00b489c3, 0x0de89d6b,
			0x04e7709d, 0x0149bd11,
			0x017eb71a, 0x0223de4a,
			0x00d9bd0d, 0x093c76a6,
			0x072fe435, 0x0d6fd2c5,
		},
		&bigNumber{
			0x067eb923, 0x0d7bbefe,
			0x0cf769ff, 0x05725ec8,
			0x0c23c0ad, 0x091bcba2,
			0x0de48aec, 0x02c71185,
			0x0e607ca2, 0x042ba874,
			0x08a195fa, 0x04386d91,
			0x079778f4, 0x045ecac6,
			0x02c493ab, 0x050614a7,
		},
		&bigNumber{
			0x0455a73b, 0x0cfbe5f2,
			0x0cdb56a2, 0x06477b21,
			0x0fda6909, 0x07f6faeb,
			0x04ebea8b, 0x0d1e04b7,
			0x00307c2a, 0x0e926e5c,
			0x0efdf04c, 0x038841bb,
			0x09be04e8, 0x001137e1,
			0x0515b17d, 0x0ea27de2,
		},
	}

	p.sub(q, r)
	c.Assert(p, DeepEquals, exp)
}

func (s *Ed448Suite) Test_PointDouble(c *C) {
	p := &twExtendedPoint{
		&bigNumber{
			0x08354b7a, 0x0895b3e8,
			0x06ae5175, 0x0644b394,
			0x0b7faf9e, 0x0c5237db,
			0x013a0c90, 0x08f5bce0,
			0x09a3d79b, 0x00f17559,
			0x0de8f041, 0x073e222f,
			0x0dc2b7ee, 0x005ac354,
			0x0766db38, 0x065631fe},
		&bigNumber{
			0x00398885, 0x055c9bed,
			0x0ae443ca, 0x0fd70ea4,
			0x09e2a7d2, 0x04ac2e9d,
			0x00678287, 0x0294768e,
			0x0b604cea, 0x07b49317,
			0x0dc2a6d9, 0x0e44a6fb,
			0x09db3965, 0x049d3bf5,
			0x03e655fe, 0x003a9c02},
		&bigNumber{
			0x0fd57162, 0x0a39f768,
			0x03009756, 0x065d735f,
			0x0d1da282, 0x0589ecd7,
			0x003196b1, 0x0c001dfe,
			0x019f1050, 0x0152e8d2,
			0x0c14ff38, 0x00f7a446,
			0x028053f6, 0x0f8a91e9,
			0x05a8d694, 0x09d5ae86},
		&bigNumber{
			0x04198f2e, 0x0d82440f,
			0x0fce100e, 0x0af4829d,
			0x0d5c3516, 0x0094a0da,
			0x078cdb39, 0x0e738836,
			0x01ec536d, 0x06dfd1e9,
			0x0ee16173, 0x0addc8c0,
			0x0797fb1d, 0x059741a3,
			0x0a7f9c34, 0x088fe0a6},
	}

	p.double(false)

	expected := &twExtendedPoint{
		&bigNumber{
			0x00d8f04c, 0x03e54689,
			0x0eb4db2b, 0x0887ba34,
			0x0a5b4ebc, 0x0f6c0261,
			0x03bfa803, 0x0408ff02,
			0x03b4ef26, 0x0465c028,
			0x0cd47378, 0x064c55b4,
			0x08245850, 0x01912682,
			0x0dcbf92c, 0x07a7fa30},
		&bigNumber{
			0x0d94d1a6, 0x0f7306e8,
			0x0278b336, 0x04362b7b,
			0x0faf02b9, 0x06b01d18,
			0x07a597da, 0x0bd6add0,
			0x047afa98, 0x0e64e897,
			0x0bbf88e6, 0x01d0a534,
			0x04a52b9d, 0x0af374e0,
			0x05091d54, 0x00fcf1a5},
		&bigNumber{
			0x042318ce, 0x04aecdae,
			0x0e8f196b, 0x0019d2e3,
			0x045d147c, 0x060b153e,
			0x0adf2c37, 0x0419cdd8,
			0x06d19046, 0x00d18821,
			0x06c7b9c2, 0x0c0ffd68,
			0x0b7e4ca2, 0x06da0d56,
			0x0952b40f, 0x03008395},
		&bigNumber{
			0x04643593, 0x000e0fdd,
			0x013f29f3, 0x0bb8992d,
			0x0a30d344, 0x09151eec,
			0x0d12bb82, 0x05c7a054,
			0x0103c2c6, 0x08a61fe2,
			0x0aced4bf, 0x0f76d481,
			0x0db774be, 0x065ef8a8,
			0x0ff47a71, 0x0f49f73e}}

	c.Assert(p, DeepEquals, expected)

	w := &twExtendedPoint{
		&bigNumber{0x1},
		&bigNumber{0x2},
		&bigNumber{0x3},
		&bigNumber{0x4},
	}

	w.double(true)

	expected2 := &twExtendedPoint{
		&bigNumber{
			0x0000003b, 0x10000000,
			0x0fffffff, 0x0fffffff,
			0x0fffffff, 0x0fffffff,
			0x0fffffff, 0x0fffffff,
			0x0ffffffe, 0x0fffffff,
			0x0fffffff, 0x0fffffff,
			0x0fffffff, 0x0fffffff,
			0x0fffffff, 0x0fffffff},
		&bigNumber{
			0x0000000e, 0x00000000,
			0x00000000, 0x00000000,
			0x00000000, 0x00000000,
			0x00000000, 0x00000000,
			0x0fffffff, 0x0fffffff,
			0x0fffffff, 0x0fffffff,
			0x0fffffff, 0x0fffffff,
			0x0fffffff, 0x0fffffff},
		&bigNumber{
			0x0000002c, 0x10000000,
			0x0fffffff, 0x0fffffff,
			0x0fffffff, 0x0fffffff,
			0x0fffffff, 0x0fffffff,
			0x0ffffffe, 0x0fffffff,
			0x0fffffff, 0x0fffffff,
			0x0fffffff, 0x0fffffff,
			0x0fffffff, 0x0fffffff},
		&bigNumber{
			0x00000002, 0x10000000,
			0x0fffffff, 0x0fffffff,
			0x0fffffff, 0x0fffffff,
			0x0fffffff, 0x0fffffff,
			0x0ffffffe, 0x0fffffff,
			0x0fffffff, 0x0fffffff,
			0x0fffffff, 0x0fffffff,
			0x0fffffff, 0x0fffffff}}

	c.Assert(w, DeepEquals, expected2)
}

func (s *Ed448Suite) Test_DecafEncode(c *C) {
	point := &twExtendedPoint{
		&bigNumber{
			0x0d9a309b, 0x000289cb,
			0x02d19f65, 0x0b622ac4,
			0x05e6807f, 0x0a08b7f8,
			0x0a2a124a, 0x00be3938,
			0x08475ec5, 0x00682935,
			0x0ab32a89, 0x08377f34,
			0x075f359d, 0x0f12f2dc,
			0x08d30bbc, 0x04c9b187,
		},
		&bigNumber{
			0x0627d6a6, 0x0d4bd92c,
			0x0a91b860, 0x0209d8f9,
			0x0acef183, 0x038a181b,
			0x01a80ca4, 0x036550a0,
			0x0810b32f, 0x0697d168,
			0x01832b57, 0x0a92e97a,
			0x0c59385b, 0x085ebf7e,
			0x035e4c9b, 0x01d4a5ce,
		},
		&bigNumber{
			0x02c059ed, 0x0a48a55e,
			0x0c8728bd, 0x09bf85c1,
			0x0d10487f, 0x0dad01c8,
			0x0ec8b362, 0x067d381b,
			0x0bd55d03, 0x0fa6172f,
			0x0da14dd1, 0x00bd1e8d,
			0x0d7d1137, 0x073a3e0c,
			0x0418d0cb, 0x0eaeb008,
		},
		&bigNumber{
			0x0ce390f7, 0x00deca5e,
			0x02f49eb1, 0x0f1bdd2b,
			0x0440bb6a, 0x04a99c96,
			0x086d3a76, 0x035d2358,
			0x0f89d14b, 0x0ccb0445,
			0x0dfbf181, 0x05c26d7b,
			0x09185fba, 0x0dc1a6e0,
			0x04f24b49, 0x0b419134,
		},
	}

	b, _ := hex.DecodeString("e4b2a1a14395b5eb3a5c3f3d265782efc28b9a94cc1d46fff8725079cee988d0955a3da9a2ef30abc30ef1bd947f48e093aad8405db1d268")

	dst := [fieldBytes]byte{}

	point.decafEncode(dst[:])

	c.Assert(dst[:], DeepEquals, b)
}

func (s *Ed448Suite) Test_DecafDecode(c *C) {
	identity := word(0xfffffff)

	point := &twExtendedPoint{
		x: &bigNumber{},
		y: &bigNumber{},
		z: &bigNumber{},
		t: &bigNumber{},
	}

	ok := decafDecode(point, serialized{
		0xe4, 0xb2, 0xa1, 0xa1, 0x43, 0x95, 0xb5,
		0xeb, 0x3a, 0x5c, 0x3f, 0x3d, 0x26, 0x57,
		0x82, 0xef, 0xc2, 0x8b, 0x9a, 0x94, 0xcc,
		0x1d, 0x46, 0xff, 0xf8, 0x72, 0x50, 0x79,
		0xce, 0xe9, 0x88, 0xd0, 0x95, 0x5a, 0x3d,
		0xa9, 0xa2, 0xef, 0x30, 0xab, 0xc3, 0x0e,
		0xf1, 0xbd, 0x94, 0x7f, 0x48, 0xe0, 0x93,
		0xaa, 0xd8, 0x40, 0x5d, 0xb1, 0xd2, 0x68,
	}, identity)

	c.Assert(point.x, DeepEquals, &bigNumber{
		0x034365c8, 0x06b2a874,
		0x0eb875d7, 0x0ae4c7a7,
		0x0785df04, 0x09929351,
		0x01fe8c3b, 0x0f2a0e5f,
		0x0111d39c, 0x07ab52ba,
		0x01df4552, 0x01d87566,
		0x0f297be2, 0x027c090f,
		0x0a81b155, 0x0d1a562b,
	})
	c.Assert(point.y, DeepEquals, &bigNumber{
		0x00da9708, 0x0e7d583e,
		0x0dbcc099, 0x0d2dad89,
		0x05a49ce4, 0x01cb4ddc,
		0x0928d395, 0x0098d91d,
		0x0bff16ce, 0x06f02f9a,
		0x0ce27cc1, 0x0dab5783,
		0x0b553d94, 0x03251a0c,
		0x064d70fb, 0x07fe3a2f,
	})
	c.Assert(point.z, DeepEquals, &bigNumber{
		0x0d5237cc, 0x0319d105,
		0x02ab2df5, 0x022e9736,
		0x0d79742f, 0x00688712,
		0x012d3a65, 0x0ef4925e,
		0x0bd0d260, 0x0832b532,
		0x05faef27, 0x01ffe567,
		0x0161ce73, 0x07bda0f5,
		0x035d04f1, 0x0930f532,
	})
	c.Assert(point.t, DeepEquals, &bigNumber{
		0x01f6cc27, 0x09be7b8a,
		0x0226da79, 0x0f6202f1,
		0x0e7264dc, 0x0d25aeb1,
		0x06c81f07, 0x03c32cdc,
		0x0923c854, 0x0cfc9865,
		0x055b2fed, 0x05bdcc90,
		0x01a99835, 0x0ea08056,
		0x0abbf763, 0x03826c2f,
	})
	c.Assert(ok, Equals, word(lmask))

	allowIdentity := word(0)

	q := &twExtendedPoint{
		x: &bigNumber{},
		y: &bigNumber{},
		z: &bigNumber{},
		t: &bigNumber{},
	}

	notOk := decafDecode(q, serialized{
		0xe4, 0xb2, 0xa1, 0xa1, 0x43, 0x95, 0xb5,
		0xeb, 0x3a, 0x5c, 0x3f, 0x3d, 0x26, 0x57,
		0x82, 0xef, 0xc2, 0x8b, 0x9a, 0x94, 0xcc,
		0x1d, 0x46, 0xff, 0xf8, 0x72, 0x50, 0x79,
		0xce, 0xe9, 0x88, 0xd0, 0x95, 0x5a, 0x3d,
		0xa9, 0xa2, 0xef, 0x30, 0xab, 0xc3, 0x0e,
		0xf1, 0xbd, 0x94, 0x7f, 0x48, 0xe0, 0x93,
		0xaa, 0xd8, 0x40, 0x5d, 0xb1, 0xd2, 0x68,
	}, allowIdentity)

	c.Assert(q.x, DeepEquals, &bigNumber{
		0x034365c8, 0x06b2a874,
		0x0eb875d7, 0x0ae4c7a7,
		0x0785df04, 0x09929351,
		0x01fe8c3b, 0x0f2a0e5f,
		0x0111d39c, 0x07ab52ba,
		0x01df4552, 0x01d87566,
		0x0f297be2, 0x027c090f,
		0x0a81b155, 0x0d1a562b,
	})
	c.Assert(q.y, DeepEquals, &bigNumber{
		0x00da9708, 0x0e7d583e,
		0x0dbcc099, 0x0d2dad89,
		0x05a49ce4, 0x01cb4ddc,
		0x0928d395, 0x0098d91d,
		0x0bff16ce, 0x06f02f9a,
		0x0ce27cc1, 0x0dab5783,
		0x0b553d94, 0x03251a0c,
		0x064d70fb, 0x07fe3a2f,
	})
	c.Assert(q.z, DeepEquals, &bigNumber{
		0x0d5237cc, 0x0319d105,
		0x02ab2df5, 0x022e9736,
		0x0d79742f, 0x00688712,
		0x012d3a65, 0x0ef4925e,
		0x0bd0d260, 0x0832b532,
		0x05faef27, 0x01ffe567,
		0x0161ce73, 0x07bda0f5,
		0x035d04f1, 0x0930f532,
	})
	c.Assert(q.t, DeepEquals, &bigNumber{
		0x01f6cc27, 0x09be7b8a,
		0x0226da79, 0x0f6202f1,
		0x0e7264dc, 0x0d25aeb1,
		0x06c81f07, 0x03c32cdc,
		0x0923c854, 0x0cfc9865,
		0x055b2fed, 0x05bdcc90,
		0x01a99835, 0x0ea08056,
		0x0abbf763, 0x03826c2f,
	})
	c.Assert(notOk, Equals, word(lmask))
}

func (s *Ed448Suite) Test_AddNielsToExtendedBeforeDouble(c *C) {
	extdPoint := &twExtendedPoint{
		&bigNumber{},
		&bigNumber{0x1},
		&bigNumber{0x1},
		&bigNumber{},
	}
	n := &twNiels{
		&bigNumber{0x068d5b74},
		&bigNumber{0x068d5b74},
		&bigNumber{0x068d5b74},
	}

	expected := &twExtendedPoint{
		&bigNumber{
			0x0fffffff, 0x0fffffff,
			0x0fffffff, 0x0fffffff,
			0x0fffffff, 0x0fffffff,
			0x0fffffff, 0x0fffffff,
			0x0ffffffe, 0x0fffffff,
			0x0fffffff, 0x0fffffff,
			0x0fffffff, 0x0fffffff,
			0x0fffffff, 0x0fffffff},
		&bigNumber{
			0x0d1ab6e7, 0x00000000,
			0x00000000, 0x00000000,
			0x00000000, 0x00000000,
			0x00000000, 0x00000000,
			0x0fffffff, 0x0fffffff,
			0x0fffffff, 0x0fffffff,
			0x0fffffff, 0x0fffffff,
			0x0fffffff, 0x0fffffff},
		&bigNumber{
			0x00000000, 0x00000000,
			0x00000000, 0x00000000,
			0x00000000, 0x00000000,
			0x00000000, 0x00000000,
			0x0fffffff, 0x0fffffff,
			0x0fffffff, 0x0fffffff,
			0x0fffffff, 0x0fffffff,
			0x0fffffff, 0x0fffffff},
		&bigNumber{0x00},
	}

	extdPoint.addNielsToExtended(n, true)

	c.Assert(extdPoint.x, DeepEquals, expected.x)
	c.Assert(extdPoint.y, DeepEquals, expected.y)
	c.Assert(extdPoint.z, DeepEquals, expected.z)
	c.Assert(extdPoint.t, DeepEquals, expected.t)
}

func (s *Ed448Suite) Test_AddNielsToExtendedPoint(c *C) {
	n := &twNiels{
		&bigNumber{
			0x08fcb20f, 0x04611087,
			0x01cc6f32, 0x0df43db2,
			0x04516644, 0x0ffdde9f,
			0x091686b9, 0x05199177,
			0x0fd34473, 0x0b72b441,
			0x0cb1c72b, 0x08d45684,
			0x00fc17a5, 0x01518137,
			0x007f74d3, 0x0a456d13},
		&bigNumber{
			0x09b607dc, 0x01430f14,
			0x016715fc, 0x0e992ccd,
			0x00a32a09, 0x0a62209b,
			0x0c26b8e4, 0x0b889ced,
			0x0ac109cf, 0x059bf9a3,
			0x0b7feac2, 0x06871bb3,
			0x0d9a0e6b, 0x0f4a4d5f,
			0x00cd69a5, 0x0b95db46},
		&bigNumber{
			0x08bda702, 0x03630441,
			0x01561558, 0x07bc5686,
			0x0e30416f, 0x0f344bc8,
			0x080f59d7, 0x0a645370,
			0x07d00ace, 0x0b4c2007,
			0x0b26f8cc, 0x0ee79620,
			0x00b5403d, 0x0a6a558e,
			0x066f3d19, 0x08f1d2c7},
	}

	extdPoint := twExtendedPoint{
		&bigNumber{
			0x00d8f04c, 0x03e54689,
			0x0eb4db2b, 0x0887ba34,
			0x0a5b4ebc, 0x0f6c0261,
			0x03bfa803, 0x0408ff02,
			0x03b4ef26, 0x0465c028,
			0x0cd47378, 0x064c55b4,
			0x08245850, 0x01912682,
			0x0dcbf92c, 0x07a7fa30},
		&bigNumber{
			0x0d94d1a6, 0x0f7306e8,
			0x0278b336, 0x04362b7b,
			0x0faf02b9, 0x06b01d18,
			0x07a597da, 0x0bd6add0,
			0x047afa98, 0x0e64e897,
			0x0bbf88e6, 0x01d0a534,
			0x04a52b9d, 0x0af374e0,
			0x05091d54, 0x00fcf1a5},
		&bigNumber{
			0x042318ce, 0x04aecdae,
			0x0e8f196b, 0x0019d2e3,
			0x045d147c, 0x060b153e,
			0x0adf2c37, 0x0419cdd8,
			0x06d19046, 0x00d18821,
			0x06c7b9c2, 0x0c0ffd68,
			0x0b7e4ca2, 0x06da0d56,
			0x0952b40f, 0x03008395},
		&bigNumber{
			0x04643593, 0x000e0fdd,
			0x013f29f3, 0x0bb8992d,
			0x0a30d344, 0x09151eec,
			0x0d12bb82, 0x05c7a054,
			0x0103c2c6, 0x08a61fe2,
			0x0aced4bf, 0x0f76d481,
			0x0db774be, 0x065ef8a8,
			0x0ff47a71, 0x0f49f73e},
	}
	expected := &twExtendedPoint{
		&bigNumber{
			0x0662c9a5, 0x0e2bc383,
			0x09b2fc38, 0x0042d545,
			0x0431bbe8, 0x09e2a364,
			0x03b8e92e, 0x0df6d043,
			0x07136f20, 0x00bde4fe,
			0x0ca79859, 0x0c484320,
			0x099507c4, 0x0ef683e6,
			0x09f8221d, 0x0b1fdcb8},
		&bigNumber{
			0x0aaf871f, 0x08fcadaf,
			0x0974aaea, 0x07d73c92,
			0x0bdaba0c, 0x069d1bf6,
			0x0906e75c, 0x0020e493,
			0x07a2e1ec, 0x06e27878,
			0x00e9c9d2, 0x08e429f5,
			0x026f7c86, 0x0420e6c5,
			0x0304fccb, 0x0599fe0e},
		&bigNumber{
			0x01b26129, 0x071c89cf,
			0x0b012391, 0x0074b87c,
			0x0331b5fb, 0x0a2cbc8d,
			0x0d1a4729, 0x0ab451d3,
			0x0308cad6, 0x0e086c2b,
			0x03bd396c, 0x0cd2bd87,
			0x0910f41c, 0x090be75a,
			0x0a8d7a0e, 0x07ec7ea8},
		&bigNumber{
			0x08b7d023, 0x05bc6276,
			0x03e2082d, 0x09d3eba3,
			0x0ecc2af3, 0x07a4c7be,
			0x08ca49b8, 0x0ebe1040,
			0x0cf6ddeb, 0x015ec1ff,
			0x010eed61, 0x0882e84d,
			0x07fefb78, 0x0d97e204,
			0x02e940a1, 0x0537d7c0},
	}

	extdPoint.addNielsToExtended(n, false)

	c.Assert(extdPoint.x, DeepEquals, expected.x)
	c.Assert(extdPoint.y, DeepEquals, expected.y)
	c.Assert(extdPoint.z, DeepEquals, expected.z)
	c.Assert(extdPoint.t, DeepEquals, expected.t)
}

func (s *Ed448Suite) Test_ConvertNielsToExtended(c *C) {
	p := &twExtendedPoint{
		&bigNumber{0x00},
		&bigNumber{0x01},
		&bigNumber{0x01},
		&bigNumber{0x00}}

	niels := &twNiels{
		&bigNumber{0x068d5b74},
		&bigNumber{0x068d5b74},
		&bigNumber{0x068d5b74}}

	expected := &twExtendedPoint{
		&bigNumber{
			0x0fffffff, 0x0fffffff,
			0x0fffffff, 0x0fffffff,
			0x0fffffff, 0x0fffffff,
			0x0fffffff, 0x0fffffff,
			0x0ffffffe, 0x0fffffff,
			0x0fffffff, 0x0fffffff,
			0x0fffffff, 0x0fffffff,
			0x0fffffff, 0x0fffffff},
		&bigNumber{0x0d1ab6e8},
		&bigNumber{0x00000001},
		&bigNumber{
			0x0fffffff, 0x0fffffff,
			0x0fffffff, 0x0fffffff,
			0x0fffffff, 0x0fffffff,
			0x0fffffff, 0x0fffffff,
			0x0ffffffe, 0x0fffffff,
			0x0fffffff, 0x0fffffff,
			0x0fffffff, 0x0fffffff,
			0x0fffffff, 0x0fffffff},
	}

	p.nielsToExtended(niels)

	c.Assert(p.x, DeepEquals, expected.x)
	c.Assert(p.y, DeepEquals, expected.y)
	c.Assert(p.z, DeepEquals, expected.z)
	c.Assert(p.t, DeepEquals, expected.t)
}

// XXX: add assoc mul and distributive
func (s *Ed448Suite) Test_PointScalarMul(c *C) {
	q := &twExtendedPoint{
		&bigNumber{
			0x0a7f964a, 0x0db033f8,
			0x062b9f0b, 0x07bff7d6,
			0x05e755a2, 0x013b6f8b,
			0x0f080bdc, 0x0a112ac0,
			0x0416988a, 0x03404b2f,
			0x00561ea3, 0x01df752c,
			0x070e0b1c, 0x0e73a0c4,
			0x078245d5, 0x09a42df0,
		},
		&bigNumber{
			0x0c2e6c3d, 0x0a03c3f2,
			0x0fd16e97, 0x0bab4ec6,
			0x08ddba78, 0x091638ef,
			0x0b0add85, 0x070c212d,
			0x04bcd337, 0x0c828579,
			0x0712cfff, 0x09c1534a,
			0x0119cafe, 0x08e72ee0,
			0x0f14ff19, 0x0d0c7e25,
		},
		&bigNumber{
			0x0a0d6be1, 0x0bcd9788,
			0x00f9ca8a, 0x038cf839,
			0x00912da2, 0x0a3c503a,
			0x056fe7e0, 0x03db9a49,
			0x0f19d062, 0x052ac631,
			0x01cbda35, 0x02967214,
			0x0eed2db2, 0x0a948ce0,
			0x05f7a3a7, 0x0fa35bc2,
		},
		&bigNumber{
			0x0fc9f32d, 0x0e442931,
			0x065e50ff, 0x04be230d,
			0x0dc923c2, 0x0000467c,
			0x08fc8902, 0x0e034cfb,
			0x0126370c, 0x06ec706d,
			0x06ff07ad, 0x0a27cd65,
			0x060f214f, 0x0eb7756d,
			0x0b694dc7, 0x015705ad,
		},
	}

	scalar := &decafScalar{
		0x6ee372b7, 0xe128ae78,
		0x1533427c, 0xad0b7015,
		0x307f665e, 0xde8026c1,
		0xb64629d1, 0xab454c66,
		0x3fe5bf1a, 0x083f8304,
		0x3c003777, 0xdef437f6,
		0xee2e1b73, 0x05ca185a,
	}

	exp := &twExtendedPoint{
		&bigNumber{
			0x08630007, 0x0bd755e6,
			0x0f76b928, 0x070d9694,
			0x0b952009, 0x0cf85b12,
			0x0c3a6e9c, 0x0e2d860e,
			0x02fd2901, 0x09a73726,
			0x02aa2d4c, 0x06913ea9,
			0x090da66d, 0x06a5c6f1,
			0x04cc7a13, 0x0eb24ed8,
		},
		&bigNumber{
			0x0bb37152, 0x0a3a36b3,
			0x0a720c7f, 0x0e29095f,
			0x04e76cf4, 0x0cfad965,
			0x07439798, 0x0f4b7ba4,
			0x0316ba61, 0x09389566,
			0x07f96104, 0x07bdc39c,
			0x0f019987, 0x05416850,
			0x0612c6c8, 0x0e231baa,
		},
		&bigNumber{
			0x0179c756, 0x04130eef,
			0x07f43255, 0x0cc1534d,
			0x03e347fd, 0x0c745e4d,
			0x068d7bf5, 0x020b8465,
			0x0356d2f1, 0x069b22fd,
			0x0b6cf87f, 0x0edf9761,
			0x034f512f, 0x0411b43f,
			0x033f0755, 0x06195e97,
		},
		&bigNumber{
			0x0866187a, 0x035622be,
			0x0b9e2e78, 0x0cae26c6,
			0x041c2c41, 0x07296c68,
			0x03343d3e, 0x062c0927,
			0x0cf5d263, 0x08db465d,
			0x033382d6, 0x0c5e6eff,
			0x0c0ded8d, 0x037837bf,
			0x03780cc6, 0x0e2360df,
		},
	}

	p := pointScalarMul(q, scalar)

	c.Assert(p.x, DeepEquals, exp.x)
	c.Assert(p.y, DeepEquals, exp.y)
	c.Assert(p.z, DeepEquals, exp.z)
	c.Assert(p.t, DeepEquals, exp.t)
}

func (s *Ed448Suite) Test_PrecomputedScalarMultiplication(c *C) {
	scalar := &decafScalar{0}

	p := precomputedScalarMul(scalar)

	expP := &twExtendedPoint{
		&bigNumber{
			0x0fffffff, 0x0fffffff,
			0x0fffffff, 0x0fffffff,
			0x0fffffff, 0x0fffffff,
			0x0fffffff, 0x0fffffff,
			0x0ffffffe, 0x0fffffff,
			0x0fffffff, 0x0fffffff,
			0x0fffffff, 0x0fffffff,
			0x0fffffff, 0x0fffffff},
		&bigNumber{
			0x0b1ff82e, 0x05e98b74,
			0x000cecf1, 0x0277711a,
			0x0f9b17c5, 0x0c98aadc,
			0x05b06211, 0x0bc17782,
			0x0809fef2, 0x08bb648f,
			0x0323239f, 0x0d37d81d,
			0x0389402c, 0x0cbabc81,
			0x087aaae9, 0x01b50b05},
		&bigNumber{
			0x04e007d1, 0x0a16748b,
			0x0ff3130e, 0x0d888ee5,
			0x0064e83a, 0x03675523,
			0x0a4f9dee, 0x043e887d,
			0x07f6010c, 0x07449b70,
			0x0cdcdc60, 0x02c827e2,
			0x0c76bfd3, 0x0345437e,
			0x07855516, 0x0e4af4fa},
		&bigNumber{
			0x0fffffff, 0x0fffffff,
			0x0fffffff, 0x0fffffff,
			0x0fffffff, 0x0fffffff,
			0x0fffffff, 0x0fffffff,
			0x0ffffffe, 0x0fffffff,
			0x0fffffff, 0x0fffffff,
			0x0fffffff, 0x0fffffff,
			0x0fffffff, 0x0fffffff},
	}

	c.Assert(p.x, DeepEquals, expP.x)
	c.Assert(p.y, DeepEquals, expP.y)
	c.Assert(p.z, DeepEquals, expP.z)
	c.Assert(p.t, DeepEquals, expP.t)
}

func (s *Ed448Suite) Test_SubNielsFromExtendedPointWhenNotDoubling(c *C) {
	n := &twNiels{&bigNumber{
		0x08db85c2, 0x0fd2361e,
		0x0ce2105d, 0x06a17729,
		0x0a137aa5, 0x0e3ca84d,
		0x0985ee61, 0x05a26d64,
		0x0734c5f3, 0x0da853af,
		0x01d955b7, 0x03160ecd,
		0x0a59046d, 0x0c32cf71,
		0x98dce72d, 0x00007fff,
	},
		&bigNumber{
			0x08db85c2, 0x0fd2361e,
			0x0ce2105d, 0x06a17729,
			0x0a137aa5, 0x0e3ca84d,
			0x0985ee61, 0x05a26d64,
			0x0734c5f3, 0x0da853af,
			0x01d955b7, 0x03160ecd,
			0x0a59046d, 0x0c32cf71,
			0x98dce72d, 0x00007fff,
		},
		&bigNumber{
			0x08db85c2, 0x0fd2361e,
			0x0ce2105d, 0x06a17729,
			0x0a137aa5, 0x0e3ca84d,
			0x0985ee61, 0x05a26d64,
			0x0734c5f3, 0x0da853af,
			0x01d955b7, 0x03160ecd,
			0x0a59046d, 0x0c32cf71,
			0x98dce72d, 0x00007fff,
		},
	}

	p := &twExtendedPoint{
		&bigNumber{
			0x0f82ee02, 0x01e3b10f,
			0x0ed7bfcc, 0x081bc4be,
			0x05aacbbd, 0x07fe70d8,
			0x01f83cca, 0x0f1e12ee,
			0x08d6e8b4, 0x02ab7e49,
			0x04755d5b, 0x0cf43119,
			0x0ce99cfa, 0x094028b2,
			0x09413391, 0x07f46d51,
		},
		&bigNumber{
			0x011a56ef, 0x0b24090d,
			0x0e216f59, 0x04bfd7f8,
			0x0cdcadc7, 0x0767fa4b,
			0x077ebfb0, 0x0c66e6d6,
			0x057264a6, 0x0aaf5008,
			0x0c37bf6e, 0x0c12e6e7,
			0x05882f0c, 0x0ac50cde,
			0x0c2507cd, 0x01d0da8b,
		},
		&bigNumber{
			0x07eb7a9a, 0x0a99ca0f,
			0x00d9ff62, 0x020ca3d8,
			0x00879e44, 0x0f70e0b6,
			0x00ef90a2, 0x0b92a557,
			0x0494775a, 0x0a1da091,
			0x0d8d2aaa, 0x05a7f9ac,
			0x0425963f, 0x049aafa3,
			0x07a98de2, 0x0d90bd06,
		},
		&bigNumber{
			0x05179579, 0x0afa355d,
			0x0a4f356e, 0x0dfb98d1,
			0x07696685, 0x0a19ebbf,
			0x01f88924, 0x0edb238d,
			0x004741e3, 0x07f9c522,
			0x09f2a2cf, 0x0fc28c0f,
			0x0c58b41e, 0x02e8182c,
			0x0110c9a5, 0x01a97390,
		},
	}

	exp := &twExtendedPoint{
		&bigNumber{
			0x0559456a, 0x0000a48a,
			0x0be4db53, 0x08f3c380,
			0x06ec1aeb, 0x0412f1ec,
			0x0820c387, 0x00cb334e,
			0x001e4e1c, 0x0e04d4db,
			0x05c26f8a, 0x0cd016b3,
			0x04b854da, 0x0280cdc7,
			0x07d114da, 0x01ca86f0,
		},
		&bigNumber{
			0x0fba123c, 0x0c853639,
			0x03dd98eb, 0x01f2ade9,
			0x09ce8374, 0x006a4a7c,
			0x0ee9b203, 0x0a148275,
			0x0e51f89c, 0x04383590,
			0x0dfc5a57, 0x01cd1a4c,
			0x0a0ce93f, 0x0fe3d3d1,
			0x0891d8b6, 0x0c030a9a,
		},
		&bigNumber{
			0x0b1a6ae2, 0x01e6c938,
			0x06d670f6, 0x0a9455b3,
			0x0a7b5ad7, 0x0100a5b2,
			0x00d4dbc0, 0x04cf6afa,
			0x0905706d, 0x0c59d1c3,
			0x0d37b997, 0x0d37c41d,
			0x0f2a766e, 0x0add64fe,
			0x03eb80e7, 0x0615a882,
		},
		&bigNumber{
			0x08f5eec2, 0x02a36bf9,
			0x0e652ff4, 0x0471ce66,
			0x0ba0a7b5, 0x030f4520,
			0x047d370a, 0x062802e2,
			0x0580f436, 0x02044dc5,
			0x0b116834, 0x0e0e1f92,
			0x0710c6df, 0x07576902,
			0x0fc511fc, 0x01e3338d,
		},
	}

	p.subNielsFromExtendedPoint(n, false)
	c.Assert(p.x, DeepEquals, exp.x)
	c.Assert(p.y, DeepEquals, exp.y)
	c.Assert(p.z, DeepEquals, exp.z)
	c.Assert(p.t, DeepEquals, exp.t)
}

func (s *Ed448Suite) Test_SubNielsFromExtendedPointWithDoubling(c *C) {
	n := &twNiels{
		&bigNumber{
			0x08fcb20f, 0x04611087,
			0x01cc6f32, 0x0df43db2,
			0x04516644, 0x0ffdde9f,
			0x091686b9, 0x05199177,
			0x0fd34473, 0x0b72b441,
			0x0cb1c72b, 0x08d45684,
			0x00fc17a5, 0x01518137,
			0x007f74d3, 0x0a456d13},
		&bigNumber{
			0x09b607dc, 0x01430f14,
			0x016715fc, 0x0e992ccd,
			0x00a32a09, 0x0a62209b,
			0x0c26b8e4, 0x0b889ced,
			0x0ac109cf, 0x059bf9a3,
			0x0b7feac2, 0x06871bb3,
			0x0d9a0e6b, 0x0f4a4d5f,
			0x00cd69a5, 0x0b95db46},
		&bigNumber{
			0x08bda702, 0x03630441,
			0x01561558, 0x07bc5686,
			0x0e30416f, 0x0f344bc8,
			0x080f59d7, 0x0a645370,
			0x07d00ace, 0x0b4c2007,
			0x0b26f8cc, 0x0ee79620,
			0x00b5403d, 0x0a6a558e,
			0x066f3d19, 0x08f1d2c7},
	}

	p := &twExtendedPoint{
		&bigNumber{
			0x0f82ee02, 0x01e3b10f,
			0x0ed7bfcc, 0x081bc4be,
			0x05aacbbd, 0x07fe70d8,
			0x01f83cca, 0x0f1e12ee,
			0x08d6e8b4, 0x02ab7e49,
			0x04755d5b, 0x0cf43119,
			0x0ce99cfa, 0x094028b2,
			0x09413391, 0x07f46d51,
		},
		&bigNumber{
			0x011a56ef, 0x0b24090d,
			0x0e216f59, 0x04bfd7f8,
			0x0cdcadc7, 0x0767fa4b,
			0x077ebfb0, 0x0c66e6d6,
			0x057264a6, 0x0aaf5008,
			0x0c37bf6e, 0x0c12e6e7,
			0x05882f0c, 0x0ac50cde,
			0x0c2507cd, 0x01d0da8b,
		},
		&bigNumber{
			0x07eb7a9a, 0x0a99ca0f,
			0x00d9ff62, 0x020ca3d8,
			0x00879e44, 0x0f70e0b6,
			0x00ef90a2, 0x0b92a557,
			0x0494775a, 0x0a1da091,
			0x0d8d2aaa, 0x05a7f9ac,
			0x0425963f, 0x049aafa3,
			0x07a98de2, 0x0d90bd06,
		},
		&bigNumber{
			0x05179579, 0x0afa355d,
			0x0a4f356e, 0x0dfb98d1,
			0x07696685, 0x0a19ebbf,
			0x01f88924, 0x0edb238d,
			0x004741e3, 0x07f9c522,
			0x09f2a2cf, 0x0fc28c0f,
			0x0c58b41e, 0x02e8182c,
			0x0110c9a5, 0x01a97390,
		},
	}

	exp := &twExtendedPoint{
		&bigNumber{
			0x0ad0c84b, 0x00e86ec2,
			0x0e48374d, 0x07bd7121,
			0x09087d3c, 0x0e306794,
			0x0bfbf8e4, 0x0ab91657,
			0x0187baca, 0x01e18d64,
			0x0c90770f, 0x0c079ef8,
			0x0e264c1f, 0x0eb244f6,
			0x092e5769, 0x0b8c7e0b,
		},
		&bigNumber{
			0x06fe7330, 0x0e8e5339,
			0x0aaa6e4e, 0x078c24c1,
			0x099ac1b7, 0x08b57975,
			0x0dc25e9f, 0x050ba301,
			0x09cdf171, 0x00b06738,
			0x02472317, 0x00064dbf,
			0x026ae17a, 0x01f0b29d,
			0x0c6c1f13, 0x027fa09c,
		},
		&bigNumber{
			0x0badc2c0, 0x0d6516ed,
			0x0c9adfe6, 0x0e8f676d,
			0x059792ce, 0x02d8e641,
			0x0b7bb000, 0x0bac1821,
			0x09c6b420, 0x048526db,
			0x06c630e3, 0x05f7c244,
			0x08abfbbe, 0x008da47f,
			0x0aa32ea5, 0x0ccd7d78,
		},
		&bigNumber{
			0x05179579, 0x0afa355d,
			0x0a4f356e, 0x0dfb98d1,
			0x07696685, 0x0a19ebbf,
			0x01f88924, 0x0edb238d,
			0x004741e3, 0x07f9c522,
			0x09f2a2cf, 0x0fc28c0f,
			0x0c58b41e, 0x02e8182c,
			0x0110c9a5, 0x01a97390,
		},
	}

	p.subNielsFromExtendedPoint(n, true)
	c.Assert(p.x, DeepEquals, exp.x)
	c.Assert(p.y, DeepEquals, exp.y)
	c.Assert(p.z, DeepEquals, exp.z)
	c.Assert(p.t, DeepEquals, exp.t)

}

func (s *Ed448Suite) Test_SubProjectiveNielsFromExtendedPoint(c *C) {
	n := &twPNiels{
		&twNiels{
			&bigNumber{
				0x08fcb20f, 0x04611087,
				0x01cc6f32, 0x0df43db2,
				0x04516644, 0x0ffdde9f,
				0x091686b9, 0x05199177,
				0x0fd34473, 0x0b72b441,
				0x0cb1c72b, 0x08d45684,
				0x00fc17a5, 0x01518137,
				0x007f74d3, 0x0a456d13},
			&bigNumber{
				0x09b607dc, 0x01430f14,
				0x016715fc, 0x0e992ccd,
				0x00a32a09, 0x0a62209b,
				0x0c26b8e4, 0x0b889ced,
				0x0ac109cf, 0x059bf9a3,
				0x0b7feac2, 0x06871bb3,
				0x0d9a0e6b, 0x0f4a4d5f,
				0x00cd69a5, 0x0b95db46},
			&bigNumber{
				0x08bda702, 0x03630441,
				0x01561558, 0x07bc5686,
				0x0e30416f, 0x0f344bc8,
				0x080f59d7, 0x0a645370,
				0x07d00ace, 0x0b4c2007,
				0x0b26f8cc, 0x0ee79620,
				0x00b5403d, 0x0a6a558e,
				0x066f3d19, 0x08f1d2c7},
		},
		&bigNumber{
			0x08fcb20f, 0x04611087,
			0x01cc6f32, 0x0df43db2,
			0x04516644, 0x0ffdde9f,
			0x091686b9, 0x05199177,
			0x0fd34473, 0x0b72b441,
			0x0cb1c72b, 0x08d45684,
			0x00fc17a5, 0x01518137,
			0x007f74d3, 0x0a456d13},
	}

	p := &twExtendedPoint{
		&bigNumber{
			0x0f82ee02, 0x01e3b10f,
			0x0ed7bfcc, 0x081bc4be,
			0x05aacbbd, 0x07fe70d8,
			0x01f83cca, 0x0f1e12ee,
			0x08d6e8b4, 0x02ab7e49,
			0x04755d5b, 0x0cf43119,
			0x0ce99cfa, 0x094028b2,
			0x09413391, 0x07f46d51,
		},
		&bigNumber{
			0x011a56ef, 0x0b24090d,
			0x0e216f59, 0x04bfd7f8,
			0x0cdcadc7, 0x0767fa4b,
			0x077ebfb0, 0x0c66e6d6,
			0x057264a6, 0x0aaf5008,
			0x0c37bf6e, 0x0c12e6e7,
			0x05882f0c, 0x0ac50cde,
			0x0c2507cd, 0x01d0da8b,
		},
		&bigNumber{
			0x07eb7a9a, 0x0a99ca0f,
			0x00d9ff62, 0x020ca3d8,
			0x00879e44, 0x0f70e0b6,
			0x00ef90a2, 0x0b92a557,
			0x0494775a, 0x0a1da091,
			0x0d8d2aaa, 0x05a7f9ac,
			0x0425963f, 0x049aafa3,
			0x07a98de2, 0x0d90bd06,
		},
		&bigNumber{
			0x05179579, 0x0afa355d,
			0x0a4f356e, 0x0dfb98d1,
			0x07696685, 0x0a19ebbf,
			0x01f88924, 0x0edb238d,
			0x004741e3, 0x07f9c522,
			0x09f2a2cf, 0x0fc28c0f,
			0x0c58b41e, 0x02e8182c,
			0x0110c9a5, 0x01a97390,
		},
	}

	exp := &twExtendedPoint{
		&bigNumber{
			0x0219ec8c, 0x0582cb83,
			0x0604bada, 0x094bb514,
			0x0657d086, 0x0e1bb3eb,
			0x0357bb2e, 0x0276644d,
			0x0b48f89e, 0x08a134e7,
			0x0f019587, 0x0760eed1,
			0x04bdd4fd, 0x056ad7fa,
			0x0ac36777, 0x08804ae2,
		},
		&bigNumber{
			0x0236a7a2, 0x052dd438,
			0x0515cbbc, 0x092ba2bc,
			0x0a88736f, 0x08279ba8,
			0x05848b64, 0x0ca9a994,
			0x063083a4, 0x021cce70,
			0x0390af55, 0x024dd769,
			0x0557e516, 0x01fc2e71,
			0x014512d3, 0x0db2e28d,
		},
		&bigNumber{
			0x0810a95c, 0x0c729dc3,
			0x0fed0297, 0x03bab06e,
			0x01c71da5, 0x0d55d72f,
			0x02ed2707, 0x022bf539,
			0x00d37809, 0x05337538,
			0x0fae2a46, 0x09d137e7,
			0x0f670848, 0x05e0ef76,
			0x0d23c081, 0x0c2c43d2,
		},
		&bigNumber{
			0x07351435, 0x08116fe9,
			0x09496edc, 0x0ae65d1a,
			0x0991a790, 0x0ded364a,
			0x028ede97, 0x0619af37,
			0x04bb808d, 0x03f0ea82,
			0x048b7e82, 0x0084fed5,
			0x01bec8d1, 0x0bde1040,
			0x0fd87b36, 0x0adc7c4d,
		},
	}

	p.subProjectiveNielsFromExtendedPoint(n, false)
	c.Assert(p.x, DeepEquals, exp.x)
	c.Assert(p.y, DeepEquals, exp.y)
	c.Assert(p.z, DeepEquals, exp.z)
	c.Assert(p.t, DeepEquals, exp.t)

}

func (s *Ed448Suite) Test_PrepareFixedWindow(c *C) {
	p := &twExtendedPoint{
		&bigNumber{
			0x0e0fbf9e, 0x0ba1bcd7,
			0x01cc6d39, 0x053b56e8,
			0x0635d142, 0x0383307a,
			0x0f8a159b, 0x097fd2cf,
			0x0fa310f6, 0x05522bde,
			0x0b981703, 0x0b095b1e,
			0x042d4780, 0x05ae11df,
			0x0934fe80, 0x0dc6474d},
		&bigNumber{
			0x02c1149c, 0x0e72febf,
			0x05259893, 0x0723e184,
			0x0f7232ff, 0x019a5600,
			0x05581d2c, 0x07331444,
			0x04e0124a, 0x09c3c5e5,
			0x0945536e, 0x0b786a20,
			0x0f75623f, 0x00ba30e8,
			0x0cc589a3, 0x04a2eea8},
		&bigNumber{
			0x02406c71, 0x0b2fdb67,
			0x02591aa2, 0x085fc24e,
			0x0dc50d09, 0x08692c5b,
			0x0ba917d7, 0x0aefea74,
			0x037d0084, 0x04d5defa,
			0x08bbe7ad, 0x050da977,
			0x08adf827, 0x05425cdd,
			0x037d816d, 0x0d59cd0a},
		&bigNumber{
			0x0baf8c30, 0x06686ad3,
			0x0c149bac, 0x0f57f68d,
			0x05cd321a, 0x02ff8d60,
			0x09dcc4bd, 0x0f731ec2,
			0x0cd7ea75, 0x0be970e4,
			0x043d30e0, 0x0dd64b9b,
			0x04f78bf1, 0x0d1fde20,
			0x05c88e97, 0x026ce314},
	}
	ntable := 16

	w := p.prepareFixedWindow(ntable)

	c.Assert(len(w), Equals, ntable)

	expected := []*twPNiels{
		// 0
		&twPNiels{
			&twNiels{
				&bigNumber{0x04b154fd, 0x02d141e7, 0x03592b5a, 0x01e88a9c, 0x093c61bd, 0x0e172586, 0x05ce0790, 0x0db34174, 0x053d0152, 0x04719a06, 0x0dad3c6b, 0x006f0f01, 0x0b481abf, 0x0b0c1f09, 0x03908b22, 0x06dca75b},
				&bigNumber{0x00d0d43b, 0x0a14bb97, 0x06f205cd, 0x0c5f386c, 0x05a80441, 0x051d867b, 0x04e232c7, 0x00b2e714, 0x04832342, 0x0f15f1c4, 0x04dd6a71, 0x0681c53f, 0x03a2a9c0, 0x066842c8, 0x05fa8823, 0x026935f6},
				&bigNumber{0x0460a1f7, 0x0e76b0c4, 0x0bc48547, 0x0a643633, 0x0ff970aa, 0x0cb5cdc9, 0x0d2a0bc4, 0x06940a23, 0x0ad0577f, 0x07e65c18, 0x04b0332f, 0x059b353f, 0x010aebde, 0x09e69eb7, 0x084e54ff, 0x09ba3b12},
			},
			&bigNumber{0x0480d8e3, 0x065fb6ce, 0x04b23545, 0x00bf849c, 0x0b8a1a13, 0x00d258b7, 0x07522faf, 0x05dfd4e9, 0x06fa010a, 0x09abbdf4, 0x0177cf5a, 0x0a1b52ef, 0x015bf04e, 0x0a84b9bb, 0x06fb02da, 0x0ab39a14},
		},
		// 1
		&twPNiels{
			&twNiels{
				&bigNumber{0x00a553ee, 0x00234003, 0x055c092c, 0x057bcbdd, 0x0e495a8c, 0x09c8b997, 0x0c143649, 0x0399ba66, 0x0df0f55f, 0x0c004b24, 0x0a7c0ab5, 0x0a95f91a, 0x005ee2fc, 0x011bb28d, 0x08ca5e5a, 0x0192776c},
				&bigNumber{0x0a2f247e, 0x02e7847f, 0x0a1e65d9, 0x0571128d, 0x0c710f20, 0x0d2d073c, 0x02f89f06, 0x01a67d7c, 0x0f1e3c52, 0x0e90f285, 0x0a97b2e7, 0x00f68012, 0x005f2af2, 0x0ddcb5d2, 0x0bd8a372, 0x0c15a881},
				&bigNumber{0x0c7957ba, 0x02b7715c, 0x0951bac2, 0x08ceafd5, 0x0de55a10, 0x01edb51f, 0x019e372a, 0x0ef9da41, 0x00e4539d, 0x08f12616, 0x072899db, 0x04eabccc, 0x01c30552, 0x03c77348, 0x02e95364, 0x0d406ee6},
			},
			&bigNumber{0x0f2830d8, 0x0056a35b, 0x08ce98ce, 0x0523ef98, 0x0922d7c0, 0x0dea9b3d, 0x04016a54, 0x0f7d6e3f, 0x0596053c, 0x0f26db88, 0x0e066eea, 0x0866a255, 0x0e8a62a7, 0x0dffb915, 0x084fa2b2, 0x04b35e84},
		},
		// 2
		&twPNiels{
			&twNiels{
				&bigNumber{0x0bdc0118, 0x02f3217f, 0x09ebc3b3, 0x07617f27, 0x0434daf9, 0x05c63130, 0x079ffbba, 0x0ed66a9f, 0x0ac6adc7, 0x0cea22df, 0x0ead4d20, 0x04d91dbe, 0x08aea04f, 0x0eff9bba, 0x08c6636d, 0x08fbf2fe},
				&bigNumber{0x0d6dae4e, 0x042ef7e0, 0x0e1974ba, 0x04c7f440, 0x0cc3f843, 0x00083ff4, 0x0490f26f, 0x0e95b6b5, 0x04b546d1, 0x059c8373, 0x03c0f841, 0x02ff119c, 0x087b2772, 0x0fc993a1, 0x02ddd9b6, 0x04a9c14d},
				&bigNumber{0x0b9dbcd2, 0x0156cdf2, 0x02889448, 0x067306ba, 0x0bb5be76, 0x090eb070, 0x0a50ce79, 0x09b43e73, 0x080845ed, 0x09a2ecf7, 0x018e594a, 0x0b241a06, 0x051f02da, 0x031bbca7, 0x09b2848e, 0x0bbb2ec8},
			},
			&bigNumber{0x08078601, 0x088d1850, 0x00e0769d, 0x08eb236c, 0x0130e14f, 0x09e4586f, 0x0911c3b0, 0x0ce7530f, 0x0c10cc39, 0x0da28bc9, 0x05845355, 0x0003ec5a, 0x07b7bf88, 0x0300bf50, 0x0653991f, 0x049db070},
		},
		// 3
		&twPNiels{
			&twNiels{
				&bigNumber{0x00496408, 0x0b651531, 0x067fd460, 0x085a3886, 0x04d21048, 0x0d621139, 0x071d8a8d, 0x03199572, 0x0e03e14c, 0x0d05c021, 0x0833d2b3, 0x0ef5a2c1, 0x0e1d24c6, 0x0027b3ae, 0x02ce6c8e, 0x08402aa3},
				&bigNumber{0x05ad9af1, 0x0a0c1d97, 0x0b2d81fb, 0x01ea8e2d, 0x0a22652b, 0x0efd1612, 0x082ba3ab, 0x0afad623, 0x0c37c3dc, 0x094a087f, 0x09442f18, 0x0813269f, 0x0a734c8d, 0x063a6cb0, 0x0010d46a, 0x06638790},
				&bigNumber{0x0689ba7e, 0x081e4dc6, 0x0c1ef0d4, 0x068f65c6, 0x03cb2bd2, 0x09c5100c, 0x011feeda, 0x0f3d4306, 0x00af4e32, 0x0358eba7, 0x07994455, 0x03534ba3, 0x0ffa2ea6, 0x0621d409, 0x0b854ef5, 0x06997a18},
			},
			&bigNumber{0x0a3dc259, 0x04b1a065, 0x03a2fa7c, 0x0099ce98, 0x0434976c, 0x04a0786d, 0x0e76a8b9, 0x0d291d23, 0x01dc0175, 0x05d1717b, 0x0c1d478a, 0x04ba7edf, 0x0b4b4324, 0x0c5f36a8, 0x0ed933aa, 0x0ac6d3f9},
		},
		// 4
		&twPNiels{
			&twNiels{
				&bigNumber{0x02df046b, 0x057e1a14, 0x0005dcd2, 0x035667ff, 0x0f83f892, 0x0d6b9dca, 0x0f8fb738, 0x025946da, 0x08263015, 0x01e7865e, 0x0c2cba18, 0x0e10546f, 0x0f091335, 0x0df8e689, 0x010a9906, 0x0830b70c},
				&bigNumber{0x0115bbe7, 0x0867aaae, 0x0ca910ef, 0x0c0ae406, 0x0a5a57ce, 0x03c2d826, 0x0457e63e, 0x0f34b795, 0x048c73f6, 0x0eb2313e, 0x0678f5b1, 0x05a6dbef, 0x0c78ba56, 0x094e3e5c, 0x0da22f13, 0x0678ecb3},
				&bigNumber{0x0797d90b, 0x023eeee5, 0x06091221, 0x0ececc3a, 0x0ec1cca5, 0x041b1079, 0x0b4f4a87, 0x0a84bb5c, 0x0976bd53, 0x074c939e, 0x0b95416c, 0x05ea1867, 0x08ebff05, 0x0bc870f1, 0x0b309de3, 0x0010c34e},
			},
			&bigNumber{0x0b38f0f1, 0x03bc6913, 0x061ba597, 0x0cf921ec, 0x0bd4a2a5, 0x02fac843, 0x083f5c15, 0x07d7877a, 0x09dfebf5, 0x015ee5a1, 0x09beba6e, 0x0a89a826, 0x08e66f3a, 0x063d031e, 0x09d450f7, 0x0a90a158},
		},
		// 5
		&twPNiels{
			&twNiels{
				&bigNumber{0x00235a46, 0x04d74adc, 0x0ddadd18, 0x061afbc5, 0x00b8d5e3, 0x04ad265e, 0x0b9914b0, 0x0e78fbb0, 0x09908a36, 0x0a2dde9e, 0x07ac5396, 0x0af6ff6a, 0x068ed7eb, 0x0dc11e8b, 0x02fec204, 0x0d5389db},
				&bigNumber{0x08ae1125, 0x0555a7b2, 0x0b489173, 0x07472588, 0x0a70d04c, 0x028ff109, 0x058ef8ab, 0x065f78fa, 0x0c88caf4, 0x026957ca, 0x02165c81, 0x05288d3d, 0x05ae2148, 0x0108fdde, 0x0d31cc57, 0x048b9c53},
				&bigNumber{0x0be9e6a9, 0x0617ae56, 0x0759b26d, 0x0c3c93e8, 0x0779d05d, 0x0789edb3, 0x081cf9dd, 0x09aa41bb, 0x07e8f870, 0x054a61b5, 0x088f337d, 0x0bb738c2, 0x06bdc816, 0x0070143c, 0x0114a075, 0x08f49ba9},
			},
			&bigNumber{0x048118f9, 0x0ec006fe, 0x05980ad8, 0x0e39107c, 0x0733036a, 0x0f5fc159, 0x07af1bad, 0x0e465b51, 0x0750076c, 0x0dd11964, 0x0b35aa73, 0x0a1fe8ae, 0x0294748c, 0x0f5150d7, 0x06ade020, 0x0659ffca},
		},
		// 6
		&twPNiels{
			&twNiels{
				&bigNumber{0x04e37267, 0x0df7e646, 0x002c1f13, 0x07145a47, 0x07f9da71, 0x0ef38604, 0x03b74cf6, 0x04f98272, 0x0b1e5de6, 0x0961e851, 0x066a9c11, 0x0637cd49, 0x0c40ca9e, 0x0ad4f30c, 0x0eddbe48, 0x0235fe80},
				&bigNumber{0x095ecd88, 0x007afcf3, 0x04645e96, 0x0929d281, 0x0c236979, 0x01487c7b, 0x01c93417, 0x0070157a, 0x000f5888, 0x0cd5c842, 0x09578536, 0x06bd9438, 0x0dde9e3f, 0x09d37fdc, 0x0c425dac, 0x081a7c61},
				&bigNumber{0x0a01e5ed, 0x04ac3269, 0x0246ed1d, 0x01184f59, 0x086c9b60, 0x0b696eae, 0x0e544d50, 0x056e5ef4, 0x0e69db47, 0x0df87f7d, 0x08e76db7, 0x0f048dd2, 0x041b6fe1, 0x0d26dde7, 0x09177799, 0x0e5ebd77},
			},
			&bigNumber{0x0f762e2c, 0x0e3d5341, 0x05ab9ead, 0x081acf6b, 0x068db9ea, 0x08cde1f2, 0x08cfc97f, 0x0df58221, 0x035f081e, 0x08b0a279, 0x0ee831ac, 0x0c40fd59, 0x07ae3f18, 0x086b3bed, 0x0ffcb0f3, 0x08492cfb},
		},
		// 7
		&twPNiels{
			&twNiels{
				&bigNumber{0x06baca70, 0x098c76c4, 0x06d43244, 0x063a0112, 0x0c712d42, 0x0c44c636, 0x0f7f2230, 0x040175a2, 0x05202d65, 0x08d900d7, 0x01da615d, 0x0894103b, 0x02fc86c6, 0x0b908128, 0x0ad5f030, 0x0a5d8188},
				&bigNumber{0x09c62e7a, 0x0194b55b, 0x00924732, 0x00baca1e, 0x0faab36a, 0x07815f7e, 0x0a75c250, 0x0e63bfa9, 0x03260e43, 0x0d0e684c, 0x06f30b44, 0x01e5fb64, 0x0de6297f, 0x03e7ae5a, 0x0fd9af92, 0x01d12c86},
				&bigNumber{0x0076d1d3, 0x0e083ce0, 0x0140855d, 0x0efb8ca5, 0x0cff83d8, 0x0f899ccb, 0x0c461c57, 0x02bc586b, 0x0eb8ebf5, 0x03f8256a, 0x071b8d04, 0x0e48f5cb, 0x08a14607, 0x03882433, 0x0c2a92b6, 0x0562a977},
			},
			&bigNumber{0x0028918f, 0x0f0c29c3, 0x0e1376f6, 0x09384b43, 0x0e8fc757, 0x00e5805c, 0x0455c0de, 0x055a162e, 0x0c4fd69a, 0x02330659, 0x061e4124, 0x094618ab, 0x040ef9be, 0x0a8f1974, 0x0b099f5c, 0x045c4715},
		},
		// 8
		&twPNiels{
			&twNiels{
				&bigNumber{0x05a5b500, 0x0985380b, 0x03849e60, 0x06582f04, 0x013402ba, 0x07c4a15b, 0x04afb6e5, 0x019465a6, 0x035d0446, 0x0df3f9e4, 0x050022f4, 0x08332f10, 0x082f2c46, 0x0f810973, 0x0e0216de, 0x0ebdd61f},
				&bigNumber{0x03aadbdc, 0x0f166b7e, 0x0a7619b8, 0x02528842, 0x008d0c13, 0x0f12020f, 0x06dd379b, 0x0736d3f4, 0x0ab1919d, 0x025ea6c2, 0x09bdc7e6, 0x0528572b, 0x0b5a9a26, 0x0f7e2e75, 0x0b326b12, 0x0ed1cd91},
				&bigNumber{0x098e28fb, 0x03895751, 0x02d65b85, 0x077bc10a, 0x07b9a601, 0x066b9a42, 0x0dfabb87, 0x01bee158, 0x09b2d4e5, 0x06919086, 0x0169f374, 0x0942eb6b, 0x0bbe91e3, 0x047d5b20, 0x037523b6, 0x0473eb88},
			},
			&bigNumber{0x077ca5f0, 0x0fdbec93, 0x0bf4673c, 0x0bcd691d, 0x0b4585cd, 0x0c082eb9, 0x03c5a97b, 0x058b3645, 0x00ef8e34, 0x0424ca79, 0x004655e4, 0x0d4a8fad, 0x08af0bb8, 0x000e75a7, 0x0b6bbaff, 0x0d40c5f3},
		},
		// 9
		&twPNiels{
			&twNiels{
				&bigNumber{0x06773538, 0x002e55cf, 0x09144496, 0x027e21a0, 0x0fa4fdbf, 0x01568a77, 0x087fe688, 0x05c6d9e6, 0x0508158c, 0x0b7433da, 0x080184db, 0x007477de, 0x00e3b950, 0x0f5b29b8, 0x0dafd838, 0x00336b81},
				&bigNumber{0x0faf83af, 0x08b8eac0, 0x045af9b9, 0x00fd0239, 0x025ab82f, 0x0a5a46c4, 0x005ab02b, 0x0548c499, 0x0af1167f, 0x0e3ff944, 0x0bbc8c50, 0x08df9171, 0x08421dcf, 0x05354fb7, 0x027fa656, 0x0d88cce5},
				&bigNumber{0x06592c5f, 0x0758bc19, 0x0976a5c4, 0x080e3e50, 0x05637d60, 0x050266c4, 0x06cce0c2, 0x000f76ba, 0x0b39952b, 0x08118c1c, 0x0f903a05, 0x08dbaac8, 0x02bb60d0, 0x082a0d3a, 0x06b73845, 0x00f848b7},
			},
			&bigNumber{0x0021161c, 0x0b667c0e, 0x08a9dc8c, 0x086fa0b9, 0x027b84c9, 0x0de272b8, 0x07dad62c, 0x0697d381, 0x03f9ac5a, 0x06b74d3b, 0x0416858d, 0x048dc187, 0x03cd18b2, 0x040eca1a, 0x0c49f066, 0x0ff05257},
		},
		// 10
		&twPNiels{
			&twNiels{
				&bigNumber{0x04992354, 0x0f624b93, 0x06c88150, 0x07f72b38, 0x02b76818, 0x01e09970, 0x07856dfb, 0x0b14c688, 0x02d8e364, 0x0d51048e, 0x0674d538, 0x0b822562, 0x0e4e17f9, 0x0b6bf11b, 0x0c10ee26, 0x070319cf},
				&bigNumber{0x036f3c2c, 0x054cefa5, 0x0cab8002, 0x0d1568b8, 0x0add5fe7, 0x0071a252, 0x04b3c490, 0x01e15013, 0x000e67bf, 0x01926c30, 0x0dc22cc5, 0x0d245c14, 0x03ed8abe, 0x0a7290c8, 0x058d2b11, 0x08aa1db2},
				&bigNumber{0x0b43c9d5, 0x0d79d7fe, 0x040a1d18, 0x0a6369f1, 0x053e0d48, 0x09f1d213, 0x0bd51750, 0x0005ec64, 0x0297d428, 0x0acf4828, 0x090dd0e3, 0x0409de55, 0x0965d34c, 0x00b94f3a, 0x01dc5637, 0x085b74a4},
			},
			&bigNumber{0x09ffe991, 0x04a4ae6a, 0x0851b2cb, 0x0dd241df, 0x0cb58ff7, 0x0e6f6cec, 0x00da8c9b, 0x09032938, 0x01a53998, 0x0d5fcd05, 0x066c843a, 0x0f153cee, 0x01ab32a1, 0x0abd6dc5, 0x06a28c1f, 0x07c2b400},
		},
		// 11
		&twPNiels{
			&twNiels{
				&bigNumber{0x054fad63, 0x0a6deab8, 0x03139dab, 0x08ec509b, 0x0f38948e, 0x02c721e1, 0x08dd641a, 0x0252cc09, 0x0c443f31, 0x0c8aaa66, 0x0c6458c1, 0x033b5b8b, 0x0089236e, 0x07b3592b, 0x09bf422c, 0x0261e002},
				&bigNumber{0x05817da6, 0x02cbe159, 0x0253d5b3, 0x004b79fb, 0x075cbe56, 0x059c447b, 0x00211c1b, 0x096e941d, 0x004f1774, 0x0c4b650a, 0x06cc4142, 0x018ce550, 0x01754ebb, 0x0afd200c, 0x0440c27e, 0x082d3511},
				&bigNumber{0x08151172, 0x0bd650e1, 0x094aa489, 0x05afdd3a, 0x03e3c4a4, 0x0c54bade, 0x030e6eb2, 0x00ffc2c0, 0x0cd3eaa0, 0x0bab2965, 0x05e31ca3, 0x07dbd978, 0x01e50070, 0x01a31a70, 0x0e187e72, 0x04a6706d},
			},
			&bigNumber{0x0a64587c, 0x09594b13, 0x07d06590, 0x0b62e1a6, 0x07a498ae, 0x040635bd, 0x04197574, 0x091c0d95, 0x09847940, 0x0be452a4, 0x0e2db46d, 0x077230bf, 0x0a8a3be9, 0x003e2ead, 0x090c8266, 0x01366b4e},
		},
		// 12
		&twPNiels{
			&twNiels{
				&bigNumber{0x0a3a6958, 0x0b7c6460, 0x0a26894a, 0x0a7f749b, 0x0d68a071, 0x08f5f7aa, 0x0129f200, 0x0be007b7, 0x0f8b0279, 0x0a1bc934, 0x0d0ece01, 0x00317338, 0x0f371340, 0x0f79d31d, 0x060ace29, 0x0ef4c1da},
				&bigNumber{0x0c1d0072, 0x0403e959, 0x0ec34cd9, 0x0c859e5e, 0x05fc7843, 0x0d850a1c, 0x0a50ccf9, 0x02dba347, 0x00d88f27, 0x08b61a79, 0x06a5f7e4, 0x0fe2f470, 0x0ecfb643, 0x05eae6fc, 0x0eeb0971, 0x0713d0d7},
				&bigNumber{0x0db37a3f, 0x07c85d50, 0x04651c14, 0x084a7a43, 0x0c624b75, 0x09db7e57, 0x05b93aaf, 0x04aacb8d, 0x014b7e2c, 0x099cc5fe, 0x06c2374a, 0x04047476, 0x0c1b46d1, 0x073aed98, 0x0cb2a6e5, 0x045903bd},
			},
			&bigNumber{0x0e1fcb85, 0x0ef06397, 0x01551f6a, 0x07ae3bcb, 0x08a026f5, 0x02398ab0, 0x0e39a35b, 0x05a9b180, 0x0df3cd2b, 0x0e7a9f02, 0x00d7f4b3, 0x070d723d, 0x0b84e97c, 0x0b1fa785, 0x0ba13ca1, 0x0a266cb0},
		},
		// 13
		&twPNiels{
			&twNiels{
				&bigNumber{0x0ec3db6b, 0x065f580b, 0x04fe9402, 0x07296ffe, 0x0a976860, 0x044b9376, 0x0060db4c, 0x08e2af69, 0x0a3c438a, 0x034a88bb, 0x06dd9552, 0x04c6d9ff, 0x0f880fef, 0x0c19a2ac, 0x003b6ea1, 0x0c5bc3a3},
				&bigNumber{0x026a4750, 0x0715decb, 0x0e648646, 0x0a122697, 0x0d0de5bf, 0x0b450ecb, 0x0eb9f9d6, 0x08d7a7cf, 0x04b5e294, 0x01a50226, 0x0eee5b89, 0x05b3390a, 0x0b64958e, 0x037eebed, 0x0041d7aa, 0x0b6ccce2},
				&bigNumber{0x0824e359, 0x0a93715f, 0x043c899c, 0x0ac52d1d, 0x01c6c0d5, 0x0c28ad2d, 0x075514b9, 0x009a03c1, 0x00852ff9, 0x035a06ff, 0x02461b9c, 0x0451dfe8, 0x077838ab, 0x0d925573, 0x08016fb9, 0x0fe722ef},
			},
			&bigNumber{0x0e50b079, 0x026c76da, 0x026b4fb0, 0x0661120a, 0x0d766626, 0x00f79967, 0x0fe99490, 0x0699c164, 0x085a39a8, 0x0ea7b9f1, 0x07103c79, 0x05046422, 0x06fe479f, 0x01827469, 0x044ee87b, 0x0cf58841},
		},
		// 14
		&twPNiels{
			&twNiels{
				&bigNumber{0x0ebfe2a0, 0x0eb5fbb2, 0x0dc6ec15, 0x0668e6e7, 0x0a2b46d6, 0x09716cff, 0x0b1f6161, 0x075f2e4b, 0x092bafec, 0x04a09fe7, 0x0d0693b5, 0x0181e9e6, 0x0ae2011c, 0x0339acaa, 0x05ab0851, 0x02e7f480},
				&bigNumber{0x00923994, 0x09e0df3c, 0x05d44abd, 0x0e120043, 0x0802cd52, 0x03d6dc68, 0x06848872, 0x0b6dc339, 0x0847737b, 0x0bc369ba, 0x02096051, 0x0bb48580, 0x07f1feb0, 0x01f3325e, 0x05347dc3, 0x0ac3e06b},
				&bigNumber{0x0efcb0d5, 0x01516f87, 0x00c105be, 0x0c6c761b, 0x0b0e62e2, 0x0a170de3, 0x07e1d862, 0x0efee135, 0x0906ff9a, 0x097301d4, 0x0746a0ee, 0x0ebb2175, 0x0bfdd54e, 0x07828235, 0x0ed64735, 0x03c5ab55},
			},
			&bigNumber{0x0cc630cf, 0x04be9e7e, 0x02806f73, 0x033000c5, 0x08901863, 0x06198942, 0x057694d2, 0x0c4ea1d8, 0x0c5c8ca4, 0x0ba40152, 0x0c694dd1, 0x085ae4e6, 0x05bc4f74, 0x0db70b9f, 0x09da2b77, 0x0a6633ef},
		},
		// 15
		&twPNiels{
			&twNiels{
				&bigNumber{0x077fc122, 0x08edd3d4, 0x0d81d8d0, 0x01ac9143, 0x08e4b336, 0x0f81211a, 0x0d1e5694, 0x008bd901, 0x04116e1f, 0x0fb16788, 0x092dd842, 0x0cbe52bb, 0x0ca568ee, 0x0f75e6bb, 0x03efc3bb, 0x00e50e2e},
				&bigNumber{0x05fbceed, 0x0eb215cb, 0x05eeff9f, 0x083a37a3, 0x0044f669, 0x0abb2e46, 0x0807c9b6, 0x0201d31e, 0x0ef4ff9c, 0x07157790, 0x087931f8, 0x0b23a524, 0x0b4c9a95, 0x012ae723, 0x0aa48f6e, 0x08f0775d},
				&bigNumber{0x01160f9b, 0x08b66bfe, 0x0d9b8296, 0x0a7bbf2a, 0x0c1a10af, 0x0f3cc344, 0x02c0089c, 0x0f4d630f, 0x07901e60, 0x0c9ce1e7, 0x02f5380a, 0x0697ba06, 0x0e6065cf, 0x0e709b4e, 0x0de4fa1d, 0x043caab1},
			},
			&bigNumber{0x012a04c3, 0x002a0678, 0x015d16e6, 0x04ec95aa, 0x0072c656, 0x01fee9b9, 0x0ea90f88, 0x04c44954, 0x0eada4ba, 0x0268f035, 0x048efc9e, 0x0905d82f, 0x0e8c31fc, 0x0f80f8f9, 0x0549be7b, 0x066b5184},
		},
	}
	c.Assert(w[0].z, DeepEquals, expected[0].z)
	c.Assert(w[0].n, DeepEquals, expected[0].n)
}

func (s *Ed448Suite) Test_ConvertExtendedToProjectiveNielsCoordinates(c *C) {
	p := &twExtendedPoint{
		&bigNumber{
			0x0cbc0465, 0x0ae92226,
			0x091cf2c2, 0x06088c39,
			0x06adcba9, 0x02b78bc6,
			0x06b0b2aa, 0x0d1b1697,
			0x0cf760b0, 0x09cc4ae8,
			0x06ff4c95, 0x06f9eaff,
			0x03f88cb2, 0x0dfe1f47,
			0x015828d5, 0x003f26ff},
		&bigNumber{
			0x0f73319b, 0x007fa279,
			0x0c6ab58a, 0x0224b18c,
			0x0bbc2c00, 0x012c8b76,
			0x07428968, 0x06047979,
			0x0a19d606, 0x0cf6c1c8,
			0x06a83f0d, 0x0725b63c,
			0x0bc33839, 0x0d9114a0,
			0x07eec286, 0x0908447d},
		&bigNumber{
			0x01e2013d, 0x0287266b,
			0x0f434216, 0x08bac041,
			0x03321096, 0x096004ef,
			0x0c9f384c, 0x0ae584aa,
			0x02a4d456, 0x02d20148,
			0x0df9a8dd, 0x051a0acf,
			0x0b3886b1, 0x00ad3c7f,
			0x06f0b032, 0x0e09bf7e},
		&bigNumber{
			0x0419dfec, 0x0723fb8c,
			0x00f6c661, 0x045419d4,
			0x00449ef9, 0x09f3003d,
			0x0d77bd3d, 0x03aabfcb,
			0x05f1ad37, 0x018339b6,
			0x0e4963f2, 0x0060cbfc,
			0x078b53f3, 0x023457ac,
			0x048d759c, 0x02a6c760},
	}

	expected := &twPNiels{
		&twNiels{
			&bigNumber{
				0x02b72d36, 0x05968053,
				0x034dc2c7, 0x0c1c2553,
				0x050e6056, 0x0e74ffb0,
				0x0091d6bd, 0x08e962e2,
				0x0d227555, 0x032a76df,
				0x0fa8f278, 0x002bcb3c,
				0x07caab87, 0x0f92f559,
				0x069699b0, 0x08c91d7e},
			&bigNumber{
				0x0c2f3600, 0x0b68c4a0,
				0x0587a84c, 0x082d3dc6,
				0x0269f7a9, 0x03e4173d,
				0x0df33c12, 0x031f9010,
				0x071136b7, 0x06c30cb1,
				0x0da78ba3, 0x0e1fa13b,
				0x0fbbc4eb, 0x0b8f33e7,
				0x0946eb5c, 0x09476b7c},
			&bigNumber{
				0x03ba27f6, 0x097f5bcd,
				0x0caccee8, 0x01a1e00a,
				0x0814dab2, 0x08fb39de,
				0x0c3f7d1f, 0x0d773562,
				0x0d542a5f, 0x092ec8d9,
				0x0fd7c5ba, 0x0d34c4ad,
				0x0743ea0c, 0x0a5ebf98,
				0x087662be, 0x0dbcdd9f},
		},
		&bigNumber{
			0x03c4027b, 0x050e4cd6,
			0x0e86842c, 0x01758083,
			0x0664212d, 0x02c009de,
			0x093e7099, 0x05cb0955,
			0x0549a8ae, 0x05a40290,
			0x0bf351ba, 0x0a34159f,
			0x06710d62, 0x015a78ff,
			0x0de16064, 0x0c137efc},
	}

	twpn := p.twPNiels()

	c.Assert(twpn.n.a, DeepEquals, expected.n.a)
	c.Assert(twpn.n.b, DeepEquals, expected.n.b)
	c.Assert(twpn.n.c, DeepEquals, expected.n.c)
	c.Assert(twpn.z, DeepEquals, expected.z)
}

func (s *Ed448Suite) Test_AddProjectiveNielsToExtendedCoordinates(c *C) {
	p := &twExtendedPoint{
		&bigNumber{
			0x065fe00e, 0x070a5e7e,
			0x0bfd74eb, 0x08eee5a2,
			0x01eb1d18, 0x06978a30,
			0x0e05687d, 0x0332d83d,
			0x029bfaa5, 0x01d55025,
			0x01a04e4d, 0x03387c04,
			0x0bfe9dbe, 0x0052df1b,
			0x0adf7ef5, 0x0f7738e9},
		&bigNumber{
			0x0e896a5f, 0x0e551bba,
			0x0363107c, 0x0ad5faf3,
			0x00d4bdd0, 0x0025431b,
			0x0a96726f, 0x06450cae,
			0x06e879ac, 0x076c4a06,
			0x04816d63, 0x072fda21,
			0x02fc227b, 0x0548ed7b,
			0x062e39e8, 0x07635ec5},
		&bigNumber{
			0x0a9cb59b, 0x0e8e9c67,
			0x08ab4927, 0x039fd088,
			0x05bafdda, 0x0010c3bf,
			0x0621a18e, 0x0288d330,
			0x0e39f617, 0x0cf20409,
			0x050aa964, 0x037696d0,
			0x0197ecc8, 0x0098a718,
			0x039ab7ce, 0x0ccac870},
		&bigNumber{
			0x003a81bc, 0x05aec25f,
			0x0352215e, 0x03ef1e1e,
			0x0c216e7b, 0x0ff5ee46,
			0x0c5784fd, 0x0f377ed9,
			0x0cd2678a, 0x0583af4e,
			0x04da9308, 0x00eeaf60,
			0x043e4dc8, 0x0e77b786,
			0x06aab96c, 0x0fe963f3},
	}

	pn := &twPNiels{
		&twNiels{
			&bigNumber{
				0x0dffcb31, 0x0426f81c,
				0x00faf45c, 0x06c50175,
				0x0b4d7ba0, 0x04bac22f,
				0x0b0d28b6, 0x0b542495,
				0x04e4c5b6, 0x08405b7e,
				0x0e2cc773, 0x0ef5cf36,
				0x0015a008, 0x056cdf03,
				0x0f0b952e, 0x09ac1df4},
			&bigNumber{
				0x0d598e52, 0x0ea2ac0e,
				0x02b8d2d9, 0x068f2906,
				0x005ebdfc, 0x01f67a03,
				0x052cc96f, 0x065635dd,
				0x044ca0b5, 0x087e7c65,
				0x02b8e2cd, 0x05f826b9,
				0x0bdb6d31, 0x07119d4b,
				0x07909767, 0x02c7692f},
			&bigNumber{
				0x0c789450, 0x09efcd8a,
				0x0917d143, 0x0eddc9f9,
				0x0c135cd5, 0x034d7893,
				0x022ea365, 0x0999b447,
				0x06951972, 0x0925c008,
				0x0fe1cd6c, 0x0f55a3fd,
				0x0081cfcf, 0x000a9eb6,
				0x02bacafd, 0x0b8a3daf},
		},
		&bigNumber{
			0x0154741b, 0x084a4939,
			0x071479d1, 0x01c5a7d6,
			0x0e77458b, 0x0b209c54,
			0x05f90c8d, 0x01e562a7,
			0x07f0fe64, 0x071b3d33,
			0x042b13a2, 0x023bca1b,
			0x0f4a5e74, 0x0b19b036,
			0x03b187a0, 0x008b6799},
	}

	p.addProjectiveNielsToExtended(pn, false)

	expected := &twExtendedPoint{
		&bigNumber{
			0x0229a19b, 0x07640779,
			0x0cd5c825, 0x00a542fe,
			0x0bb2362b, 0x0261d1af,
			0x015db410, 0x0ca63130,
			0x00e9a7e4, 0x00a06584,
			0x01029e89, 0x025cdd0e,
			0x0a11b601, 0x0c592ed0,
			0x0b1854d2, 0x0c374936},
		&bigNumber{
			0x045e9fe6, 0x09017d4c,
			0x077f92d8, 0x079e77d5,
			0x081ea883, 0x0ad757f3,
			0x088b186c, 0x03d4ae18,
			0x01f422c7, 0x048c7fc1,
			0x052d50d6, 0x0b310d2d,
			0x0f98c559, 0x0ce135a0,
			0x02cdff0e, 0x06c117fd},
		&bigNumber{
			0x0ac69c60, 0x0fa58fee,
			0x0e0b93bd, 0x0c5887dc,
			0x0dc231b4, 0x08d5bd5a,
			0x0cbaa909, 0x06cda8c7,
			0x064c5ba3, 0x0b7a44bc,
			0x0e076348, 0x008976ff,
			0x04ae0ed6, 0x03735252,
			0x04c09fca, 0x075120c2},
		&bigNumber{
			0x0f5f78ac, 0x0f2f972b,
			0x0c7b74b5, 0x084ae55c,
			0x03fe0c33, 0x02441814,
			0x0b335997, 0x052cd9d7,
			0x00af1474, 0x0d285ac9,
			0x0ea87209, 0x087cd8a3,
			0x03d9718e, 0x0b8f00f3,
			0x003d8c42, 0x0345b1a8},
	}

	c.Assert(p.x, DeepEquals, expected.x)
	c.Assert(p.y, DeepEquals, expected.y)
	c.Assert(p.z, DeepEquals, expected.z)
	c.Assert(p.t, DeepEquals, expected.t)
}

func (s *Ed448Suite) Test_PointDoubleScalarmul(c *C) {
	p1 := &twExtendedPoint{
		&bigNumber{
			0x0e0fbf9e, 0x0ba1bcd7,
			0x01cc6d39, 0x053b56e8,
			0x0635d142, 0x0383307a,
			0x0f8a159b, 0x097fd2cf,
			0x0fa310f6, 0x05522bde,
			0x0b981703, 0x0b095b1e,
			0x042d4780, 0x05ae11df,
			0x0934fe80, 0x0dc6474d},
		&bigNumber{
			0x02c1149c, 0x0e72febf,
			0x05259893, 0x0723e184,
			0x0f7232ff, 0x019a5600,
			0x05581d2c, 0x07331444,
			0x04e0124a, 0x09c3c5e5,
			0x0945536e, 0x0b786a20,
			0x0f75623f, 0x00ba30e8,
			0x0cc589a3, 0x04a2eea8},
		&bigNumber{
			0x02406c71, 0x0b2fdb67,
			0x02591aa2, 0x085fc24e,
			0x0dc50d09, 0x08692c5b,
			0x0ba917d7, 0x0aefea74,
			0x037d0084, 0x04d5defa,
			0x08bbe7ad, 0x050da977,
			0x08adf827, 0x05425cdd,
			0x037d816d, 0x0d59cd0a},
		&bigNumber{
			0x0baf8c30, 0x06686ad3,
			0x0c149bac, 0x0f57f68d,
			0x05cd321a, 0x02ff8d60,
			0x09dcc4bd, 0x0f731ec2,
			0x0cd7ea75, 0x0be970e4,
			0x043d30e0, 0x0dd64b9b,
			0x04f78bf1, 0x0d1fde20,
			0x05c88e97, 0x026ce314},
	}

	s1 := &decafScalar{
		0x9a1044c6, 0x92f78393,
		0x68cea2bc, 0x5f23f942,
		0xd4384e9e, 0x76969060,
		0x4d82f8cc, 0xb8016c73,
		0x1db9b587, 0x061aca05,
		0x9f0333f5, 0x5a2a7f4a,
		0x216a1e70, 0x1d22f534}

	p2 := &twExtendedPoint{
		&bigNumber{
			0x06172a44, 0x0731d576,
			0x0da247e0, 0x0d9fd318,
			0x072d1c77, 0x073e77aa,
			0x09a004b5, 0x012507b9,
			0x09a684c3, 0x08b559f8,
			0x0d445c85, 0x07941c89,
			0x0c942cd4, 0x02bcfe3e,
			0x022ccaaa, 0x0be3a6b3},
		&bigNumber{
			0x03294fb1, 0x0e4336b5,
			0x0fe125d6, 0x08c09f34,
			0x0f04e3ce, 0x0eac940d,
			0x09c38a23, 0x0a2ec035,
			0x06545488, 0x0355e18f,
			0x0522a0ec, 0x0ce0fd60,
			0x0bd3a6ce, 0x03fe9d85,
			0x06e5c4f3, 0x018cf1e5},
		&bigNumber{
			0x0e957107, 0x0f672aa2,
			0x049b0276, 0x07a7ecf2,
			0x0e9a1c69, 0x04067d01,
			0x03f2ddee, 0x0ffebccb,
			0x0d58b6cf, 0x0d95fb9c,
			0x077d5935, 0x078ddbc3,
			0x085093f2, 0x03015d2f,
			0x019d8e0a, 0x0388a2ac},
		&bigNumber{
			0x0bf26ccb, 0x0b930dcd,
			0x0e207a77, 0x0d8fdde5,
			0x04e2452b, 0x099e9922,
			0x0ec0b62c, 0x04f9d73b,
			0x03811a2a, 0x0871aefb,
			0x00f5e028, 0x0b6aa04c,
			0x0226cb55, 0x0b6e4ee0,
			0x0f3eba42, 0x04409402},
	}

	s2 := &decafScalar{
		0x3aad8a3d, 0x7cbae122,
		0xed340da1, 0x1e37d7eb,
		0x2a2e914d, 0xcae48b24,
		0x9e50875c, 0xc5b5e48b,
		0x89d9f0e4, 0xdf9d2321,
		0x8775f116, 0xd1868de2,
		0x139f9896, 0x0ddda899}

	expected := &twExtendedPoint{
		&bigNumber{
			0x096c3e19, 0x01279202,
			0x04f50d93, 0x0699657f,
			0x022bd90b, 0x00351763,
			0x08a42a56, 0x07974163,
			0x004f6ab9, 0x0c05f96c,
			0x0f16bb21, 0x0cde601f,
			0x0cef16a4, 0x0ed8b1fc,
			0x02bd0b33, 0x01fbbe05},
		&bigNumber{
			0x0c171c6f, 0x0e23595f,
			0x03c79297, 0x048e7f98,
			0x0e5726b1, 0x064d69df,
			0x055c5256, 0x05b529ee,
			0x0e3fa1f4, 0x0c3bdb08,
			0x0f07561d, 0x0142253c,
			0x06aeb72b, 0x04032bee,
			0x017cd13e, 0x0e948c21},
		&bigNumber{
			0x0fcb5cea, 0x0172ef5b,
			0x0b22800b, 0x0392234e,
			0x0a790ab2, 0x0e6073b7,
			0x088dfcf4, 0x096ca9ff,
			0x0b835126, 0x085db724,
			0x01781712, 0x06798d82,
			0x05b74273, 0x0b76addb,
			0x061c22d2, 0x0fde553b},
		&bigNumber{
			0x03b8199d, 0x0b47e9ac,
			0x0c90cec3, 0x0677ee9d,
			0x03f00db6, 0x0809b693,
			0x0dd662eb, 0x043fe5b9,
			0x0271b801, 0x0f616c66,
			0x0fc957d0, 0x0b6bbc82,
			0x01f8bca7, 0x0077de17,
			0x0a2a5944, 0x00fc5ac9},
	}

	out := doubleScalarMul(p1, p2, s1, s2)

	c.Assert(out.x, DeepEquals, expected.x)
	c.Assert(out.y, DeepEquals, expected.y)
	c.Assert(out.z, DeepEquals, expected.z)
	c.Assert(out.t, DeepEquals, expected.t)
}
