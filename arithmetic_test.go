package ed448

import (
	. "gopkg.in/check.v1"
)

func (s *Ed448Suite) Test_ModQ_WithPrimeOrder(c *C) {
	zero := make([]byte, fieldBytes)
	primeOrderSerial := []byte{
		0xf3, 0x44, 0x58, 0xab, 0x92, 0xc2, 0x78,
		0x23, 0x55, 0x8f, 0xc5, 0x8d, 0x72, 0xc2,
		0x6c, 0x21, 0x90, 0x36, 0xd6, 0xae, 0x49,
		0xdb, 0x4e, 0xc4, 0xe9, 0x23, 0xca, 0x7c,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f,
	}
	primeOrderModQ := ModQ(primeOrderSerial)
	c.Assert(primeOrderModQ, DeepEquals, zero)

	one := append([]byte{0x01}, make([]byte, fieldBytes-1)...)
	primeOrderPlusOne := []byte{
		0xf4, 0x44, 0x58, 0xab, 0x92, 0xc2, 0x78,
		0x23, 0x55, 0x8f, 0xc5, 0x8d, 0x72, 0xc2,
		0x6c, 0x21, 0x90, 0x36, 0xd6, 0xae, 0x49,
		0xdb, 0x4e, 0xc4, 0xe9, 0x23, 0xca, 0x7c,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f,
	}
	primeOrderPlusOneModQ := ModQ(primeOrderPlusOne)
	c.Assert(primeOrderPlusOneModQ, DeepEquals, one)
}

func (s *Ed448Suite) Test_Mul(c *C) {
	zero := [fieldBytes]byte{}
	one := [fieldBytes]byte{}
	one[0] = 0x01

	resultZero := Mul(zero, testValue)
	resultValueTimes1 := Mul(one, testValue)

	c.Assert(resultZero, DeepEquals, zero)
	c.Assert(resultValueTimes1, DeepEquals, testValue)
}

func (s *Ed448Suite) Test_Add(c *C) {
	zero := [fieldBytes]byte{}
	one := [fieldBytes]byte{}
	one[0] = 0x01

	valuePlusOne := [56]byte{
		0x04, 0x44, 0x58, 0xab, 0x92, 0xc2, 0x78,
		0x23, 0x55, 0x8f, 0xc5, 0x8d, 0x32, 0xc2,
		0x6c, 0x21, 0x90, 0x36, 0xd6, 0xae, 0x49,
		0xdb, 0x4e, 0xc4, 0xe9, 0x23, 0xca, 0x7c,
		0xff, 0xff, 0xff, 0x1f, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0x2f, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f,
	}

	resultAddZero := Add(zero, testValue)
	resultAddOne := Add(one, testValue)

	c.Assert(resultAddZero, DeepEquals, testValue)
	c.Assert(resultAddOne, DeepEquals, valuePlusOne)
}

func (s *Ed448Suite) Test_Sub(c *C) {
	zero := [fieldBytes]byte{}
	one := [fieldBytes]byte{}
	one[0] = 0x01

	valueMinusOne := [56]byte{
		0x02, 0x44, 0x58, 0xab, 0x92, 0xc2, 0x78,
		0x23, 0x55, 0x8f, 0xc5, 0x8d, 0x32, 0xc2,
		0x6c, 0x21, 0x90, 0x36, 0xd6, 0xae, 0x49,
		0xdb, 0x4e, 0xc4, 0xe9, 0x23, 0xca, 0x7c,
		0xff, 0xff, 0xff, 0x1f, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0x2f, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f,
	}

	resultSubZero := Sub(testValue, zero)
	resultSubOne := Sub(testValue, one)

	c.Assert(resultSubZero, DeepEquals, testValue)
	c.Assert(resultSubOne, DeepEquals, valueMinusOne)
}
